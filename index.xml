<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://erkanerol.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <lastBuildDate>Wed, 23 Nov 2016 23:11:42 +0300</lastBuildDate>
    <atom:link href="https://erkanerol.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kalıtım Kullanımına Dair Bir Aydınlanma Anı</title>
      <link>https://erkanerol.github.io/post/misuse-inheritance/</link>
      <pubDate>Wed, 23 Nov 2016 23:11:42 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/misuse-inheritance/</guid>
      <description>&lt;p&gt;Geçenlerde &amp;ldquo;Composition over Inheritance&amp;rdquo; ile alakalı bazı okumalar yapmaya karar verdim. Bu prensibi duymuştum ve genel olarak anlamıştım ama biraz derinlere inmek istedim. Yaptığım google aramalarında bir makaleye denk geldim. Makaleyi okurken bir aydınlanma yaşadım ve paylaşmak istedim.&lt;/p&gt;

&lt;p&gt;Makalede geçen iki kod parçasına bir an bakalım.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Stack extends ArrayList {
    public void push(Object value) { … }
    public Object pop() { … }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
class CustomerGroup extends ArrayList&amp;lt;Customer&amp;gt; {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buradaki sorularımız şunlar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stack, ArrayList&amp;rsquo;in uygun bir alt tipi midir? (bkz: Liskov Substitution Principle)&lt;/li&gt;
&lt;li&gt;CustomerGroup dediğimiz sınıfın domain&amp;rsquo;i ile ArrayList&amp;rsquo;in domain&amp;rsquo;i aynı mıdır?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cevaplar ve ayrıntılar için makaleyi okumanızı şiddetle öneririm. Yazar gayet güzel anlatmış. Benim için aydınlanma olan kısmı &amp;ldquo;cross-domain inheritance relationship&amp;rdquo; olarak ifade edilen kısımdı. Okuduğum kodlardan gelen ezberlerim vardı ve kodu ben yazsaydım zaten böyle yazmazdım. Ama zihnimde bu ayrımı bu kadar net yapmamıştım hiç.&lt;/p&gt;

&lt;p&gt;Makalenin linkini &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/composition-vs-inheritance-how-choose&#34;&gt;veriyor&lt;/a&gt;  ve iyi okumalar diliyorum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yazılım Bağlamında Cohesion ve Coupling Kavramları Üzerine</title>
      <link>https://erkanerol.github.io/post/cohesion-coupling/</link>
      <pubDate>Thu, 29 Sep 2016 22:27:32 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/cohesion-coupling/</guid>
      <description>

&lt;h2 id=&#34;giriş:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Giriş&lt;/h2&gt;

&lt;p&gt;Bu aralar Software Craftsmanship alanında okumalar yapmaya ve vakit buldukça konuşmalar izlemeye çalışıyorum. Yazılımın temel prensipleri ve kavramları bu alanın ana başlıklarından. Ben de okuduğum, anlamaya çalıştığım bu 2 kavramı çok çok basit şekilde,  kendimce açıklamaya çalışacağım.&lt;/p&gt;

&lt;h3 id=&#34;diyelim-ki:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Diyelim ki&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Diyelim ki bir yazılım geliştiriyoruz. Yazılımımızın yapması gereken belirli işler var. Bu işleri yapabilmek için irili ufaklı onlarca/yüzlerce/binlerce fonksiyona ihtiyacımız var. Bunların rastgele bir fonksiyon uzayında yer aldığını düşünelim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/functionSpace.png&#34; title=&#34;Function Space&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Bu fonksiyonlar arasındaki elbette ilişkiler var. Birbirlerini çağırıyor olabilirler, aynı veri yapılarını kullanıyor olabilirler, aynı fonsiyonlara bağımlılıkları olabilir vs. Şimdilik o kısmı bir kenara bırakıyoruz ve şu soruya odaklanıyoruz. Bunlar yazılımımızda bu şekilde mi bulunur? Böyle dağınık, başıboş, düzensiz :( Elbette bunları gruplara ayırır, modüllerin içine koyarız değil mi? Java açısından baktığımızda bunları sınıfların(classes) içine koyarız, paketleme yaparız. Olmadı bunları modüllere/projelere ayırır, build araçları ile birbirine bağlarız.&lt;/p&gt;

&lt;h3 id=&#34;deneme-bir-ki:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Deneme bir ki&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Kabaca fonksiyonları modüllere ayırmaya çalışalım.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/modules1.png&#34; title=&#34;Modules1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Ya şimdi writeLog ile sendMail ne alaka&amp;rdquo; cümlesini duyar gibiyim sevgili okuyucu :) Maalesef ki bizim Utils/Helpers gibi isimler verdiğimiz nesnelerin içi de biraz böyle. Bu neden böyle olmamalı konusuna geliyorum hemen.&lt;/p&gt;

&lt;p&gt;Modüllere ayırırken nasıl ayırırız? Neyi amaçlarız? Hedefimiz nedir? Ne kadar büyük olmalılar? Aradaki ilişkiler nasıl olmalı?&lt;/p&gt;

&lt;h3 id=&#34;amaç:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Amaç&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Öğelerimizi modüllere ayırırken genel olarak izlediğimiz prensip şu: Bir değişiklik yapmamız gerekiyorsa sadece bir yerde yapmamız gerekmeli, bir yeri değiştirmemiz gerekiyorsa bunun sadece bir nedeni olmalı.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Burada biraz duralım. Şimdi şöyle düşünelim. Elimizde öğeler var. Herhangi bir modülün parçaları bunlar. Bir de olası değişiklik nedenleri var.&lt;/p&gt;

&lt;p&gt;Eğer alakasız şeyleri bir araya koyarsak birden fazla sebep orayı değiştirmemizi gerektirebilir. Yani modülümüz &lt;strong&gt;odaklı&lt;/strong&gt; olmaz, ne iş yaptığı kolay anlaşılamaz, bakımı zorlaşır. Bu istediğimiz bir durum değil. Öğeler olabildiğince birbirine yapışık olmalı. Tabi ki bunun için öğeleri gereksiz yere birbirine yapıştırmıyoruz :) Yapışık olmayanları ayırmamız lazım.
&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/lowCohesion.png&#34; title=&#34;lowCohesion&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;Eğer ayırdığımız modüller birbirleriyle çok bağlantılı ise bir nedenden dolayı birden fazla yeri değiştirmemiz gerekebilir ki bunu istemiyoruz. Çünkü bu durumu yönetmek zaman içinde zorlaşır.
&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/highCoupling.png&#34; title=&#34;highCoupling&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;
İdeal olan, istediğimiz bu ilişkinin bire bir olmasıdır. Bunun için tek sorumluluk prensibini ( &lt;a href=&#34;http://webpro.github.io/programming-principles/#single-responsibility-principle&#34; &gt;Single Responsibility Principle - SRP &lt;/a&gt;) iyi uygulamamız gerekir.&lt;/p&gt;

&lt;p&gt;bkz: &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well&#34;&gt; Do One Thing and Do It Well. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/ideal.png&#34; title=&#34;ideal&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;tanımlar:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Tanımlar&lt;/h3&gt;

&lt;p&gt;Bir modülün içindeki öğelerin birlikteliğini ve modülün odaklılığını ifade etmek için kullandığımız kavram &lt;strong&gt;cohesion&lt;/strong&gt;. Düşük cohesion dediğimizde bu birlikteliğin zayıflığını, yüksek cohesion dediğimizde bu birlikteliğin yüksekliğini ifade ederiz. Az önce anlattığım üzere hedef olabildiğince yüksek (&lt;strong&gt;high cohesion&lt;/strong&gt;) olmasıdır.&lt;/p&gt;

&lt;p&gt;Modüllerin arasındaki irtibatı ifade etmek için kullandığımız kavram da &lt;strong&gt;coupling&lt;/strong&gt;. Düşük coupling modüllerin daha bağımsız olduğunu, yüksek coupling birbirlerine daha bağlı olduğunu ifade eder. Hedef olabildiğince düşük (&lt;strong&gt;low coupling&lt;/strong&gt;) olmasıdır. İlk şekildeki modüllerin arasındaki okların olabildiğinca az ve zayıf olmasıdır.&lt;/p&gt;

&lt;h3 id=&#34;deneme-bir-ki-1:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Deneme bir ki&amp;hellip;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/cohesion-coupling/modules2.png&#34; title=&#34;Modules2&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Şimdi biraz daha iyi oldu gibi. Ama içlerini görmeden tam olarak emin olamayız :)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;cohesion-çeşitleri:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Cohesion Çeşitleri&lt;/h3&gt;

&lt;p&gt;Sevgili büyüklerimiz, yazılımcılar modülleri nasıl oluşturuyor, ne tür cohesion oluşturma tipleri var gibi bir araştırma yapmış ve şu tipleri bulmuşlar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tesadüfi (Coincidental):&lt;/strong&gt;
Modüldeki öğelerin rastgele seçilmesi durumu. Yukarıdaki writeLog ile sendMail&amp;rsquo;in aynı modülde olması gibi. Bu daha çok Utils, Helpers gibi isimlendirilen modüllerde görülüyor. &lt;strong&gt;En kötüsü budur.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mantıksal (Logical):&lt;/strong&gt;
Aynı kategoride olduğu düşünülen öğelerin aynı modüle konulması durumu. Mesela bütün veri tabanı işlemlerinin ya da bütün input girişlerine ilişkin işlemlerin aynı modüle konulması.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geçici (Temporal):&lt;/strong&gt;
Zaman içinde lazım oldukça eklenen öğelerin modül oluşturması durumu. Bu işlemler birbirleriyle alakasız olabilir. Gereksinimler değiştiğinde bambaşka yerlere de gidebilir ama o an için oradalar işte.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prosedürel (Procedural):&lt;/strong&gt;
Bir akışın içindeki işlemlerin beraberce modüller oluşturması durumu. Örnek olarak dosyanın varlığının kontrolü, dosyanın açılması, yazılacak içeriğin oluşturulması, verinin yazılması, dosyanın kapatılması gibi işlemlerden oluşan bir modül düşünebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;İletişimsel(Communication):&lt;/strong&gt;
Aynı veri/girdi/çıktı üzerinde çalışan işlemlerin aynı modüllere konulması durumu. Örneğin bir nesneniz var ve bu nesneye ilişkin bütün herşey bir arada. Kontroller, hesaplamalar, güncellemeler vs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sıralı (Sequential):&lt;/strong&gt;
Birbirleriyle girdi-çıktı ilişkisi olan, sıralı işlemlerin aynı modüllere konulması durumu. Prosedürel olan tipe oldukça benziyor. Farkı şöyle. Bu tipteki işlemlerden birinin çıktısı, diğerinin girdisi durumunda. Dosyanın okunması işlemi ile okunan verinin işlenmesi işlemi bu tipte aynı modülde oluyor. Prosedürel de böyle bir girdi-çıktı ilişkisi gerekli değil. Ard arda olması yeterli.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fonksiyonel (Functional):&lt;/strong&gt;
Yalnızca iyi tanımlanmış bir adet işi yapmak üzere işlemlerin bir araya getirilmesi ile modüllerin oluşturulmasıdır. XML formatındaki bir string&amp;rsquo;i parse eden bir modül örneğin. &lt;strong&gt;En iyisi budur.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;şunlara-bakılabilir:fc55cfebb6706ae110ddffc0136adcbe&#34;&gt;Şunlara bakılabilir&lt;/h3&gt;

&lt;p&gt;Bu konu epey uzun. Daha çok okumak ve öğrenmek isteyenlere aşağıdaki linkleri verip konuyu kapatalım.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://codurance.com/software-creation/2016/03/03/cohesion-cornerstone-software-design/&#34;&gt;Cohesion - Sandro Mancuso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webpro.github.io/programming-principles/#maximise-cohesion&#34;&gt;Maximise Cohesion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webpro.github.io/programming-principles/#minimise-coupling&#34;&gt;Minimise Coupling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.toronto.edu/~penny/teaching/csc407-02s/lectures/04structured-design.pdf&#34;&gt;Structured Design - CSC407&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Structured-Design-Fundamentals-Discipline-Computer/dp/0138544719&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design - Yourdon Press , Larry L. Constantine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Abstract Factory Tasarım Şablonu</title>
      <link>https://erkanerol.github.io/post/abstract-factory-design-pattern/</link>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://erkanerol.github.io/post/abstract-factory-design-pattern/</guid>
      <description>

&lt;h2 id=&#34;amaç:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Amaç&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Elimizde benzer ve ilişkili nesneler var ve bunları somut sınıflarını belirtmeden oluşturmak için bir arayüz istiyoruz&lt;/li&gt;
&lt;li&gt;Platformlara özgü özellikleri ve nesnelerin platformlara göre farklılık gösteren yaratılışını sarmalamak (encapsulation) istiyoruz.&lt;/li&gt;
&lt;li&gt;new operatörü ile yeni nesne yaratmanın sorunlu olduğunu düşünüyoruz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sorun:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Sorun&lt;/h2&gt;

&lt;p&gt;Yazdığımız uygulamanın değişik platformlarda çalışmasını istediğimizde bu platformlara özgü farklılıklar sorun oluşturur ve nesne yaratımlarında bu farklılıkları ele almamız gerekir. Örneğin, windows işletim sistemindeki arayüz birleşenleri ile ubuntu işletim sistemindekler arasında ciddi farklar vardır ve biz her yeni birleşen oluşturma esnasında platformu kontrol etmek, ona göre farklı şekilde yaratmak istemeyiz. Bir arayüz tasarlamak ve bu ortak arayüz üzerinden bütün nesneleri yaratmak ve kullanmak isteriz. Platforma özgü sınıflar bu arayüzü destekleyecek şekilde kendi birleşenlerini oluşturacak işlevselliği sağlarlar.&lt;/p&gt;

&lt;h2 id=&#34;yöntem:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Yöntem&lt;/h2&gt;

&lt;p&gt;Bu tasarım şablonunda nesnelerin sınıflarını ve nesneleri üreten üretici sınıfları soyutlamamız gerekir. Bu nesneler kullanıcılar (clients) tarafından doğrudan oluşturulmayıp nesne üretici (fabrika) sınıflar vasıtası ile üretilirler.&lt;/p&gt;

&lt;h2 id=&#34;yapı:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Yapı&lt;/h2&gt;

&lt;p&gt;Abstract Factory her bir ürün için bir Factory Method (makeProductOne,makeProductTwo vb.) tanımlar. Her Factory Method new operatörünü ve platforma özgü ürün sınıflarını sarmalar. Her platform fabrika sınıflarıyla modellenir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/Abstract_Factory-2x.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;örnek:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Örnek&lt;/h2&gt;

&lt;p&gt;Örneğimizde Ubuntu ve Windows platformları için UI birleşenleri üreten bir Abstract Factory şablonu oluşturalım. Bu örnekte platformlardan bağımsız bir şekilde pencere ve buton üreten bir yapı kuralım. Örneğin UML diagramı ve kodu aşağıda mevcuttur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/abstract-factory-design-patterns-button.png&#34; /&gt;
Buton arayüzü ve Windows+Ubuntu Platformları için ürün sınıfları&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;
&lt;img src=&#34;https://erkanerol.github.io/img/abstract-factory-design-patterns-window.png&#34; /&gt;
Pencere arayüzü ve Windows+Ubuntu Platformları için ürün sınıfları
&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;
&lt;img src=&#34;https://erkanerol.github.io/img/abstract-factory-design-patterns-factory.png&#34; /&gt;
Abstract Factory ve Windows+Ubuntu Platformları için fabrika sınıfları
&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;kod:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Kod&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
public interface Button {
    public void click();
    public void setLabel(String label);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public interface Window {
    public void setHeader(String label);
    public void openWindow();
    public void closeWindow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public interface AbstractUIFactory {
    public Button createButton();
    public Window createWindow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class UbuntuButton implements Button {

    @Override
    public void click() {
        System.out.println(&#34;UbuntuButton is  Clicked&#34;);
    }

    @Override
    public void setLabel(String label) {
        System.out.println(&#34;UbuntuButton label is set as &#34;+label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class UbuntuWindow implements Window {

    @Override
    public void setHeader(String label) {
        System.out.println(&#34;Ubuntu window header is set as &#34;+label);
    }

    @Override
    public void openWindow() {
        System.out.println(&#34;Ubuntu window is opened&#34;);
    }

    @Override
    public void closeWindow() {
        System.out.println(&#34;Ubuntu window is closed&#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class UbuntuUIFactory implements UIFactory {

    @Override
    public Button createButton() {
        return new UbuntuButton();
    }

    @Override
    public Window createWindow() {
        return new UbuntuWindow();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class WindowsButton implements Button {

    @Override
    public void click() {
        System.out.println(&#34;Windows Button is  Clicked&#34;);
    }

    @Override
    public void setLabel(String label) {
        System.out.println(&#34;WindowsButton Label is set as &#34;+label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class WindowsWindow implements Window {

    @Override
    public void setHeader(String label) {
        System.out.println(&#34;Windows window header is set as &#34;+label);
    }

    @Override
    public void openWindow() {
        System.out.println(&#34;Windows window is opened&#34;);
    }

    @Override
    public void closeWindow() {
        System.out.println(&#34;Windows window is closed&#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class WindowsUIFactory implements UIFactory {

    @Override
    public Button createButton() {
        return new WindowsButton();
    }

    @Override
    public Window createWindow() {
        return new WindowsWindow();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
public class Client {

    public static void main(String[] args) {

        /**
         *  buradan sonra abstractUiFactory üzerinden nesneleri olusturuyoruz.
         *  windows mu ubuntu mu umrumuzda değil.
         */
        AbstractUIFactory abstractUiFactory =  createUIFactoryAccordingToOS();

        doButtonOperations(abstractUiFactory);
        doWindowOperations(abstractUiFactory);
    }

    private static void doWindowOperations(AbstractUIFactory abstractUiFactory) {
        Window window = abstractUiFactory.createWindow();
        window.setHeader(&#34;Header of Window&#34;);
        window.openWindow();
        window.closeWindow();
    }

    private static void doButtonOperations(AbstractUIFactory abstractUiFactory) {
        Button button = abstractUiFactory.createButton();
        button.setLabel(&#34;Click me&#34;);
        button.click();
    }

    private static AbstractUIFactory createUIFactoryAccordingToOS() {
        if (System.getProperty(&#34;os.name&#34;).startsWith(&#34;Windows&#34;)) {
            return new WindowsUIFactory();
        } else {
            return new UbuntuUIFactory();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kontrol-listesi:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Kontrol Listesi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Platformdan bağımsızlık ve nesnelerin oluşturulması sorun oluşturuyor ise bu şablonu kullanın&lt;/li&gt;
&lt;li&gt;Platform vs. nesne matrisi oluşturun&lt;/li&gt;
&lt;li&gt;Her bir nesnenin yaratma metodlarını içeren  bir fabrika arayüzü tanımlayın&lt;/li&gt;
&lt;li&gt;Her bir platform için new operatörünü kapsülleyen fabrika sınıfları tanımlayın&lt;/li&gt;
&lt;li&gt;Kullanıcı sınıflar (clients) bu nesneleri new  operatörü ile oluşturmamalı ve fabrika sınıflarının arayüzlerini kullanmalı&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;genel-kabul-görmüş-kurallar:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Genel Kabul Görmüş Kurallar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Zaman zaman aynı sorunu çözmek için farklı oluştucu tasarım şablonları kullanılabilir. Prototype veya Abstract Factory şablonlarından hangisi daha uygunsa o kullanılır. Diğer zamanlarda oluşturucu tasarım şablonları birbirlerinin tamamlayıcısıdırlar. Abstract Factory şablonunda nesne yaratmak için Prototype şablonu kullanılabilir. Builder şablonu hangi birleşenlerin yaratılacağına karar verme kısmında kullanılabilir. Abstract Factory, Builder ve Prototype şablonları kendi uygulamalarında (implementation) Singleton şablonunu kullanabilirler.&lt;/li&gt;
&lt;li&gt;Abstract Factory, Builder ve Prototype şablonları ürün nesnelerini bilen ve yaratan, sistem içinde parametrik bir şekilde yaratılmasını sağlayan fabrika nesneleri tanımlarlar. Benzer gözükmekle beraber aralarında önemli farklar vardır. * Abstract Factory bir çok sınıfa ait nesne yaratan fabrika nesnelerine sahiptir. Builder şablonu karmışık bir ürünü, ilişkili karmaşık bir protokolü takip ederek oluşturan fabrika nesnesine sahiptir. Prototype şablonu ise prototip objeden kopyalarak yeni nesne yaratan fabrika nesnesine sahiptir.&lt;/li&gt;
&lt;li&gt;Abstract Factory sınıfları genellikle Factory Methods kullanılarak uygulanır (implemented). Ancak Prototype kullanılarak da uygulanabilir.&lt;/li&gt;
&lt;li&gt;Abstract Factory şablonu platforma özgü sınıfları gizlemek amacıyla Facade şablonuna alternatif olarak da kullanılabilir.&lt;/li&gt;
&lt;li&gt;Builder şablonu karmaşık bir nesneyi adım adım oluşturmaya odaklanır. Abstract Factory şablonu ise benzer ürün ailelerin* i karmaşık veya basit farketmeksizin oluşturmak için kullanılır. Builder şablonu ürünü son adımda kullanıcıya teslim ederken Abstract Factory şablonu anında ürünü verir.&lt;/li&gt;
&lt;li&gt;Tasarımlar genelde Factory Method (daha basit, daha özelleştilebilir) kullanılarak başlasa da tasarımcılar daha fazla esnekliğe*  ihtiyaç duyduklarını farkettiklerinde tasarım zamanla Abstract Factory, Prototype veya Builder (daha esnek ve daha karmaşık) şablonlarına evrilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;repo:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Repo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/erkanerol/design-patterns/tree/master/src/com/erkanerol/examples/abstractfactory&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kaynakça:a0c0e350f6599cc7bba451baf3fa092a&#34;&gt;Kaynakça&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcemaking.com&#34;&gt;https://sourcemaking.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Önemli Not 1:&lt;/strong&gt; sourcemaking.com sitesinde  About Us sayfasında &amp;ldquo;We also welcome translation.&amp;rdquo; ibaresi yer almaktadır. Bu yazının yazılmasında/çevrilmesinde herhangi bir ticari amaç bulunmamaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Önemli Not 2:&lt;/strong&gt; Yazıda gördüğünüz hataları bana bildirirseniz sevinirim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dry Prensibi</title>
      <link>https://erkanerol.github.io/post/dryprinciple/</link>
      <pubDate>Thu, 02 Jun 2016 20:23:06 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/dryprinciple/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NOT: Bu yazı The Pragmatic Programmer kitabındaki &amp;ldquo;The Evils of Duplication&amp;rdquo; bölümünden yararlanılarak yazılmıştır.&lt;/p&gt;

&lt;h2 id=&#34;programlama-prensibi:d0614ac1fa1cc14179708291a9502c82&#34;&gt;Programlama Prensibi&lt;/h2&gt;

&lt;p&gt;DRY&lt;/p&gt;

&lt;p&gt;Keep It Dry&lt;/p&gt;

&lt;p&gt;Keep Things Dry&lt;/p&gt;

&lt;h2 id=&#34;açılımlar:d0614ac1fa1cc14179708291a9502c82&#34;&gt;Açılımlar&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t repeat yourself&lt;/p&gt;

&lt;h2 id=&#34;açıklama:d0614ac1fa1cc14179708291a9502c82&#34;&gt;Açıklama&lt;/h2&gt;

&lt;p&gt;DRY prensibi yazılımın en temel prensiplerinden biridir. &amp;ldquo;Kendini tekrar etme&amp;rdquo; anlamına gelen bu prensip kod tekrarlarından sakınılması gerektiğini savunur. The Pragmatic Programmer kitabında DRY olarak isimlendirilmiş ve genişçe açıklanmıştır.&lt;/p&gt;

&lt;p&gt;Programcılar olarak bizler bilgiyi toplar, organize eder, bakımını yapar ve programlarımızda kullanırız. Zaman zaman dökümanlar hazırlarız. Testlerde kontrol amaçlı kullanırız. Fakat maalesef bilgi durağan değildir, zaman içinde sıklıkla değişir. Bizler elimizdeki bilgiler her değiştiğinde yaptığımız işleri gözden geçirmek ve onları bu güncellemeye göre değiştirmek zorundayız.  Bu bakım sırasında bilginin sistem içindeki bütün gösterimlerini bulmamız gerekir. Eğer sistem içerisinde değişen bilgilerin bir çok yerde gösterimleri var ise bu bakım kabusa dönüşür. Bu nedenle yazılımın daha güvenilir olması, bakımının kolay yapılabilmesi ve anlaşılması adına şu prensibe ihtiyacımız vardır:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Her bir bilgi parçacığı sistem içinde tek, anlaşılabilir ve yetkilendirilmiş bir gösterime sahip olmalıdır.&amp;rdquo;
Aksi halde bir yerde değişiklik yaptığımızda diğer yerlerde de değişiklik yapmayı hatırlamamız gerekir ki bu gereklilik hatalara neden olabilir.  Şimdi bunu iki örnek ile açıklayalım.&lt;/p&gt;

&lt;p&gt;Birincisi çok basit bir kod tekrar örneği. [4]&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-js&#34;&gt;
// BAD
if ( eventfade.data( &#34;currently&#34; ) !== &#34;showing&#34; ) {
    eventfade.stop();
}
 
if ( eventhover.data( &#34;currently&#34; ) !== &#34;showing&#34; ) {
    eventhover.stop();
}
 
if ( spans.data( &#34;currently&#34; ) !== &#34;showing&#34; ) {
    spans.stop();
}
 
// GOOD!!
var elems = [ eventfade, eventhover, spans ];
 
$.each( elems, function( i, elem ) {
    if ( elem.data( &#34;currently&#34; ) !== &#34;showing&#34; ) {
        elem.stop();
    }
});
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Yukarıdaki örnekte bir kontrol ve method çağırma işlemi 3 element içinde ayrı ayrı yapılmış. Diyelim ki biz bu koşulda ikinci bir method çağırma ihtiyacı duyduk. Yapacağımız şey 3 if bloğunun içine de bu çağırma ifadesini eklemek olacaktı. Bu sayının 3 değilde 10 olduğunu düşündüğümüzde bunun hataya ne kadar açık olduğunu görebiliriz.  Halbuki ikinci şekildeki gibi yazılsaydı bir satırda değişikliğimizi yapabilirdik. Bu nedenle kodu başlangıçta ikinci şekildeki gibi yazmalıyız. Eğer elementlere özel değişik koşullar eklenirse refactoring yaparak kodu bölmeli ve yine tekrarlama olmadan işimizi halletmeliyiz.&lt;/p&gt;

&lt;p&gt;İkinci olarak daha güzel bir örnek vermek istiyorum. Diyelim ki bir CRUD uygulaması yazıyoruz. Uygulamada 3 tip kullanıcı var: yönetici, kayıtlı kullanıcı ve misafir kullanıcı. Uygulamada 4 tip varlık (entity) ve bunların web sayfaları var.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;
//BAD
HashMap&lt;String,String&gt; pages = new HashMap&lt;String, String&gt;();
pages.put(&#34;book&#34;,&#34;mybooks.xhtml&#34;);
pages.put(&#34;author&#34;,&#34;myauthors.xhtml&#34;);
pages.put(&#34;reader&#34;,&#34;myreaders.xhtml&#34;);
pages.put(&#34;library&#34;,&#34;mylibraries.xhtml&#34;);

HashMap&lt;String,String&gt; adminAuthority = new HashMap&lt;String,String&gt;();
adminAuthority.put(&#34;book&#34;,&#34;all&#34;);
adminAuthority.put(&#34;author&#34;,&#34;all&#34;);
adminAuthority.put(&#34;reader&#34;,&#34;all&#34;);
adminAuthority.put(&#34;library&#34;,&#34;all&#34;);

HashMap&lt;String,String&gt; registeredUserAuthority = new HashMap&lt;String,String&gt;();
registeredUserAuthority.put(&#34;book&#34;,&#34;create&#34;);
registeredUserAuthority.put(&#34;author&#34;,&#34;create&#34;);
registeredUserAuthority.put(&#34;reader&#34;,&#34;read&#34;);
registeredUserAuthority.put(&#34;library&#34;,&#34;read&#34;);

HashMap&lt;String,String&gt; guestUserAuthority = new HashMap&lt;String,String&gt;();
adminAuthority.put(&#34;book&#34;,&#34;read&#34;);
adminAuthority.put(&#34;author&#34;,&#34;read&#34;);
adminAuthority.put(&#34;reader&#34;,&#34;read&#34;);
adminAuthority.put(&#34;library&#34;,&#34;read&#34;);



//GOOD
public class MyEntity {
    String page;
    HashMap&lt;String,String&gt; authorities;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;İlk şekilde bir bilginin dörde ayrılıp 4 farklı yerde saklandığını görüyoruz. Bir varlığın web sayfası ve 3 kullanıcı için yetkileri 4 farklı yerde. Yeni bir varlık eklememiz gerektiğinde 4 yerde değişiklik yapmamız zorunlu. Halbuki ikinci şekildeki gibi bir nesne kullansak, uygulamanın her bileşeni bu bilgi içinden kendine lazım olan kısmı alır ve kullanır. Böylece bilginin bir gösterimi olur ki takibi ve bakımı çok daha kolay olur.&lt;/p&gt;

&lt;p&gt;DRY prensibinin açıklamasında sistem kelimesinin kullanılmasının bir anlamı vardır. Tekrarlamanın sadece kodda değil bütün bir sistemde olmaması gerektiğini ifade eder. Yorumlar, testler, dökümanlar vb. bu sisteme dahildir.&lt;/p&gt;

&lt;p&gt;Tipler, Nedenler ve Çözüm Önerileri&lt;/p&gt;

&lt;h3 id=&#34;1-zorla-tekrarlama:d0614ac1fa1cc14179708291a9502c82&#34;&gt;1. Zorla Tekrarlama&lt;/h3&gt;

&lt;p&gt;Bu tekrarlama tipinde geliştiriciler tekrarlama yapmaktan başka çarelerinin olmadığını düşünürler.&lt;/p&gt;

&lt;p&gt;a) Bilginin birden fazla gösteriminin zorunlu olması: Bazen yazılımın mimarisi tekrarlamayı sorunlu kılar. Örneğin, server-client yapısı kullandığımızda iki tarafta da aynı bilgiyi kullanmamız gerekir. Bu gibi durumlarda dilin metadata özelliklerini kullanarak kod üreten kodlar geliştirmeye, tekrarlamaları otomotik olarak üretmeye çalışmalıyız.
b) Kodun içinde dökümantasyon: Geliştiriciler zaman zaman iyi kodun çok yorum eklenen kod olduğunu düşünse de iyi kod çok yorum gerektirmez. Özellikle alt düzeylerde çok açık işlemleri yorumlamak tekrarlama olarak düşünülebilir. Bu nedenle sadece gerekli yerlerde yorumlar eklenmelidir.
c)Kod ve Dökümantasyon: Dökümanlar ve kod  çoğu zaman aynı bilginin farklı gösterimlerini içerir ve ikisinden birinde değişiklik yaptığımızda diğerinde de yapmamız gerekir. Bu tip durumlarda değişimleri otomatik olarak diğer tarafa yansıtacak otomasyonlar kullanmalıyız. Javadoc buna güzel bir örnektir.
d)Dil ile ilgili meseleler: Bazı diller tekrarlamayı zorunlu kılar. Aynı bilgiyi farklı yerlerde kullanmamızı bizden talep eder. C ve C++ dillerindeki başlık(header) dosyaları buna örnektir. Bu gibi durumlarla başa çıkmak kolay değildir. Dile özgü çözümleri araştırmamız ve tekrarlamadan kaynaklı sorunları nasıl hafifleteceğimizi bulmamız gerekir.&lt;/p&gt;

&lt;h3 id=&#34;2-yanlışlıkla-tekrarlama:d0614ac1fa1cc14179708291a9502c82&#34;&gt;2. Yanlışlıkla Tekrarlama&lt;/h3&gt;

&lt;p&gt;Bu tekrarlama tipinde geliştiriciler tekrarlama yaptığının farkında değildirler. Yukarıda verdiğimiz örnekler bu kategoride değerlendirilebilir. Yazılımın genel prensiplerine uyarak ve takım içinde birbirimizin kodlarını gözden geçirerek bu sorunu çözebiliriz.&lt;/p&gt;

&lt;h3 id=&#34;3-sabırsızlıktan-tekrarlama:d0614ac1fa1cc14179708291a9502c82&#34;&gt;3. Sabırsızlıktan Tekrarlama&lt;/h3&gt;

&lt;p&gt;Bu tekrarlama tipinde geliştiriciler tembellik eder ve tekrarlamayı daha kolay bulurlar. Bu tekrarlamaların kısa vadede zaman kazandırsa da uzun vadede büyük sorunlara yol açtığı açıktır. Bilinçlenme, disiplinli kod geliştirme ve takım içinde kodların gözden geçirilmesi ile çözülebilir. (Aptallığın lüzumu yok :D )&lt;/p&gt;

&lt;h3 id=&#34;4-geliştiriciler-arası-tekrarlama:d0614ac1fa1cc14179708291a9502c82&#34;&gt;4. Geliştiriciler Arası Tekrarlama&lt;/h3&gt;

&lt;p&gt;Bu tekrarlama tipinde farklı geliştiriciler bir bilgiyi farklı yerlerde tekrarlarlar. Geliştiriciler arasındaki iletişim yeterince kuvvetli olmadığında bu sorun ortaya çıkabilir. İletişimi kuvvetlendirerek, birbirimizin kodlarını gözden geçirerek bu sorunu çözebiliriz. Ayrıca yazılım mimarisinin hatalı olması da geliştiricileri buna zorlayabilir. Anlaşılabilir tasarım, iyi bir teknik lider, görevlerin iyi bir şekilde ayrıştırılması bu sorunun başlıca çözümlerindendir.&lt;/p&gt;

&lt;h3 id=&#34;kaynakça:d0614ac1fa1cc14179708291a9502c82&#34;&gt;Kaynakça&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Hunt, Andrew, and David Thomas. &amp;ldquo;7. The Evils of Duplication.&amp;rdquo; The Pragmatic Programmer: From Journeyman to Master. Reading, MA: Addison-Wesley, 2000. N. pag. Print.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kurumsaljava.com/2009/11/17/dry/&#34;&gt;http://www.kurumsaljava.com/2009/11/17/dry/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.jquery.com/code-organization/dont-repeat-yourself/&#34;&gt;https://learn.jquery.com/code-organization/dont-repeat-yourself/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>YAGNI Prensibi</title>
      <link>https://erkanerol.github.io/post/yagniprinciple/</link>
      <pubDate>Wed, 25 May 2016 22:46:50 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/yagniprinciple/</guid>
      <description>

&lt;p&gt;Not: Bu yazı Martin Fowler&amp;rsquo;ın YAGNI yazısının özeti ve tercümesi niteliğindedir.&lt;/p&gt;

&lt;h2 id=&#34;programlama-prensibi:2db6997b7e4e28f4bef7f95c364f67ee&#34;&gt;Programlama Prensibi&lt;/h2&gt;

&lt;p&gt;YAGNI&lt;/p&gt;

&lt;h2 id=&#34;açılımlar:2db6997b7e4e28f4bef7f95c364f67ee&#34;&gt;Açılımlar&lt;/h2&gt;

&lt;p&gt;You Aren’t Gonna Need It
You Aint Gonna Need It&lt;/p&gt;

&lt;h2 id=&#34;açıklama:2db6997b7e4e28f4bef7f95c364f67ee&#34;&gt;Açıklama&lt;/h2&gt;

&lt;p&gt;YAGNI, Extreme programlamanın prensiplerinden biridir. Gelecekte lazım olacak düşüncesi ile bir takım özelliklerin geliştirilmemesi gerektiğini savunur. Şimdi bir örnek üzerinden bu prensibi anlamaya çalışalım.&lt;/p&gt;

&lt;p&gt;Diyelim ki projemize bir &amp;ldquo;oturum açma&amp;rdquo; özelliği ekliyoruz. O anda bizden istenen şey kullanıcıların kullanıcı adı ve şifreleri ile giriş yapabilmelerini sağlayan bir özellik. Fakat biz &amp;ldquo;ilerde lazım olur&amp;rdquo; düşüncesi ile facebook ile de oturum açılmasını sağlayabilecek şekilde geliştiriyoruz arka taraftaki methodlarımızı. İşte tam bu noktada YAGNI diyor ki &amp;ldquo;YAPMA&amp;rdquo;.  Peki neden?&lt;/p&gt;

&lt;p&gt;Yazılımcıların o an kullanmayacakları özellikleri geliştirmesinin en yaygın sebebi o özelliği o an geliştirmenin daha ucuz olacağını düşünmeleridir. Örneğimizden gidecek olursak geliştirici şöyle düşünür: &amp;ldquo;Şimdiden ben arka tarafta facebook entegrasyonunu yapayım. Yarın bir gün zaten istenecek bu benden. O zaman bu yazdıklarımı değiştirmem gerekmez.&amp;rdquo; Fakat bu özellik yazıldığı an itibari ile &amp;ldquo;varsayımsal özellik&amp;rdquo; kategorisindedir ve hiç bir zaman sizden talep edilmeyecek olabilir. Bu noktada bazıları bunun planlama olduğunu ve iyi analizler sonucu bu tip geliştirmeler yapılabileceğini iddia edebilir. Ne var ki gerçek hayat tecrübeleri bunun çok uzağındadır ve geliştiriciler yanlış öngördükleri varsayımsal özelliklerin geliştirme maliyetine katlanmak zorunda kalır. Bu özellik için harcanan analiz, programlama ve test etme süreleri boşa harcanmış olur.&lt;/p&gt;

&lt;p&gt;Diyelim ki biz doğru tahmin ettik ve o özellik gerçekten bize lazım olacaktı. Bu durumda bile bu varsayımsal özelliğin bize getirdiği ciddi maliyetler vardır. Birincisi biz gelecekte lazım olacağını düşündüğümüz bu özelliği yaparken bugün yapmamız gereken işlerin bir kısmını geciktiririz. Örneğin, oturum açma özelliğinden sonra bir arama özelliği eklememiz gerekiyordu ve biz facebook entegrasyonunu da yaptığımız için bu özellik 2 gün gecikti. Yani varsayımsal bu özellik bize gecikme maliyeti getirdi. Yapılan araştırmalara göre geliştirilen özelliklerin ancak &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;&amp;rsquo;ünün gerçekten faydalı olduğu da düşünülürse hali hazırda gerekli olan bir özelliği varsayımlar üzerine geciktirmek yeniden düşünülmesi gereken bir eylemdir.&lt;/p&gt;

&lt;p&gt;Doğru tahmin ettiğimiz durumdaki tek maliyet geciktirme maliyeti değildir. Taşıma maliyeti de en önemli sorunlardan biridir. Biz gelecekte işe yarayacağımız bu özelliğin kodunu projemizde taşımak zorunda kalırız. Bütün değişikliklerde kodun o kısmını da değiştirmemiz gerekir. O an hiç kullanmadığımız bu kod parçacığı hatalara sebep olabilir. Debug sırasında o kısmı da debug etmemiz gerekir. Özetle projeye eklenen her bir satır kodun bedellerini bu özellik için eklenen satırlar için de öderiz. Halbuki bu özelliği sonradan projeye ekleseydik bu süre içinde bu maliyete katlanmamız gerekmeyecekti.&lt;/p&gt;

&lt;p&gt;Şu ana kadar varsayımımızın doğru ve yanlış olduğu durumları ele aldık. Fakat daha gerçekçi olan olasılık tahminimizin doğru olması ama geliştirmenin tam doğru olmamasıdır. Yazılımcıların sürekli öğrendiğini ve gereksinimlerin sürekli değiştiğini düşünürsek eklediğimiz bu özelliği ilerleyen dönemlerde kullanmak istesek bile bazı değişikler yapmamız gerekir. Örneğin facabook API&amp;rsquo;da bir değişiklik yapmış olabilir. Kullandığımız kütüphaneden daha güzel bir kütüphane çıkmış olabilir ve onu değiştirmek isteyebiliriz. Bu durumlarda da bakım maliyetine katlanmak zorunda kalırız. Geliştirdiğimizi düşündüğümüz özelliği projeye gerçekten dahil etmek için fazladan efor harcarız.&lt;/p&gt;

&lt;p&gt;Aşağıda şu ana kadar anlattıklarımı özetleyen bir grafik mevcut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/yagni.png&#34; title=&#34;YAGNI&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;ölçü:2db6997b7e4e28f4bef7f95c364f67ee&#34;&gt;Ölçü&lt;/h2&gt;

&lt;p&gt;YAGNI prensibinin ne zaman geçerli olduğu konusu biraz göreceli fakat kısaca şöyle denebilir: Varsaydığımız özelliğin büyüklüğü arttıkça YAGNI prensibinin önemi artar. 1-2 saatlik bir iş yapılacaksa ve bu ilerde bir kaç günlük bir geliştirmeyi karşılayacaksa bunda çok sakınca olmayabilir fakat bu süre uzadıkça riskleriniz artar.&lt;/p&gt;

&lt;p&gt;Ayrıca YAGNI kodun kolay değiştirilebilecek şekilde yazılmaması anlamına gelmez. Aksine YAGNI bir Extreme Programming prensibidir ve XP&amp;rsquo;nin en önemli pratiklerinden biri Refactoring&amp;rsquo;dir. XP kodun kolay değiştirilebilir olmasını öğütler. Bol bol refactoring yaparak kodumuzu temiz tuttuğumuzda, methodlarımızı parametrik yazdığımızda zaten özellikleri sonradan eklemek bize çok maliyet getirmez. Bu anlamda YAGNI esnek kod yazma ile çatışmaz, uyum içerisindedir.&lt;/p&gt;

&lt;h2 id=&#34;kaynakça:2db6997b7e4e28f4bef7f95c364f67ee&#34;&gt;Kaynakça&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34;&gt;http://martinfowler.com/bliki/Yagni.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webpro.github.io/programming-principles/#yagni&#34;&gt;http://webpro.github.io/programming-principles/#yagni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.extremeprogramming.org/rules/early.html&#34;&gt;http://www.extremeprogramming.org/rules/early.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/xp/YouArentGonnaNeedIt.html&#34;&gt;http://c2.com/xp/YouArentGonnaNeedIt.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Çıraklık Şablonları:  Hevesli Yazılım Ustasının Rehberi</title>
      <link>https://erkanerol.github.io/post/hevesli-yazilimcinin-rehberi/</link>
      <pubDate>Tue, 17 May 2016 15:56:13 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/hevesli-yazilimcinin-rehberi/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;So, why this book now? Well, we’ve overloaded our profession with resources. There is more information available about our revolution than any one person can absorb. Still, some people manage to do it. They internalize all the advice available to them and always seem to have it close at hand. How do they do achieve that level of mastery? This book is full of patterns for mastering our complex field. Mastering is more than just knowing. It is knowing in a way that lightens your load.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;
TL;DR Şu kitabı her yazılımcının okuması gerektiğine inanıyorum ve şiddetle tavsiye ediyorum.
&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/apprenticeship-cover.png&#34; title=&#34;Apprenticeship Patterns&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;tanıtım:c384b087910c43172fdcea43b3e304eb&#34;&gt;Tanıtım&lt;/h2&gt;

&lt;p&gt;Benim gözümde yazılımcılar ikiye ayrılıyor.
1. Para karşılığı bir süre kod yazan ve 40 yaşında kod yazmak istemeyenler.
+Para vermeselerde kod yazacak olan ve 40 yaşında bile kod yazmaktan kopmak istemeyenler.&lt;/p&gt;

&lt;p&gt;Bu kitap 2. kategori yazılımcı olmak isteyen çıraklar için bire bir. Meslek hayatının belirli dönemlerinde, belirli durumlarda yapılması gerekenlere dair tavsiyeler içeriyor. Bir çok yazılımcının tecrübelerinden yola çıkarak hazırlanan bu kitabın içinde bir çok şablon bulunuyor.&lt;/p&gt;

&lt;p&gt;Örnek olması açısında &amp;ldquo;Find Mentors&amp;rdquo; isimli şablonun özetini çıkardım:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Context:  Yürüdüğünüz yoldan daha önce geçenlerin olduğunu farkettiniz ve yolunuzu aramak için çok fazla zaman kaybediyorsunuz.&lt;/li&gt;
&lt;li&gt;Problem: Yürüdüğünüz yolda tek başınasınız ve önünüzü göremiyorsunuz. Yardıma ve rehberliğe ihtiyacınız var.&lt;/li&gt;
&lt;li&gt;Solution: Size çıraklığa kabul edecek ustalar bulun ve mentörünüz olmalarını isteyin.&lt;/li&gt;
&lt;li&gt;Action: Bir aracın, kütüphanenin veya topluluğun mail grubuna katılın. Bir süre pusuya yatın ve gözlemleyin. Yeteri derecede olaylara hakim olduktan sonra etkinliklerine katılın ve size mentörlük edebileceğini düşündüğünüz ustalardan &amp;ldquo;informal&amp;rdquo; mentörlük talep edin.&lt;/li&gt;
&lt;li&gt;See Also: &amp;ldquo;The Deep End&amp;rdquo; ve &amp;ldquo;The Long Road&amp;rdquo; isimli şablonlara da bakabilirsiniz.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;kitapta-bulunan-bütün-şablonlar:c384b087910c43172fdcea43b3e304eb&#34;&gt;Kitapta Bulunan Bütün Şablonlar&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/apprenticeship-patterns.png&#34; title=&#34;Apprenticeship Patterns&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;kişisel-yorumlarım:c384b087910c43172fdcea43b3e304eb&#34;&gt;Kişisel Yorumlarım&lt;/h2&gt;

&lt;p&gt;Ben kitaptaki bir çok şablonun benim durumuma uyduğunu gördüm ve çözüm önerilerini çok mantıklı buldum. Elimden geldiğince uygulamaya çalışacağım. Bu kitap aslında sadece belirli durumlara ilişkin yapılacaklar listesi değil. Kitabın tamamını okuduğunuzda yazılım alanında nasıl iyi bir yazılımcı olunabileceğine dair bir fikriniz oluyor. Mesleki gelişimin usûl esaslarını tanımlıyor ki usûlü esastan her daim önde tutan biri olarak ( bkz: usûl esasa mukaddemdir) benim en sevdiğim kısmı bu oldu. Yani kitap size şu kitapları okuyun demiyor, hangi kitapları okumanız gerektiğini nasıl anlayacağınızı anlatıyor. Yazılım geliştirmenin sadece bir dil/framework/kütüphane/araç bilmek olmadığını, işin ciddi bir felsefesi olduğunu anlamak açısından da oldukça faydalı. Bu arada bunları bilmenin ne kadar önemli olduğuna dair pek çok şablon var. Öyle kuru felsefeyle kalma diyor yani :) Benim yorumlamam bu kadar. Aşağıda altını çizdiğim bazı yerler var.&lt;/p&gt;

&lt;p&gt;Paylaşım linkleri aşağıda mevcuttur. Bu kitap çok önemli. Elden ele yayalım :)&lt;/p&gt;

&lt;h2 id=&#34;alıntılarım-spoiler:c384b087910c43172fdcea43b3e304eb&#34;&gt;Alıntılarım (SPOILER!!!)&lt;/h2&gt;

&lt;p&gt;Apprentices are people who are willing to take on a junior role that maximizes their learning opportunities, as opposed to people who try to climb as quickly as they can into roles that maximize their financial opportunities. In my experience, if the apprentice has talent and the right attitude, their financial success will inevitably follow their learning success.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Failure is inevitable. It happens to everybody sooner or later. In fact, someone who has never failed at anything has either avoided pushing at the boundaries of their abilities or has learned to overlook their own mistakes.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Working with masters is the best way to learn a craft.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;“I want to change the way people think about programming,” Kent said. I agreed. We both wanted to reverse what we thought had been a wrong turn in the progress of our industry. And, amazingly, we did it.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Humility is one of the foundations of a successful apprenticeship. Combined with ambition, humility will help keep you focused and progressing in the right direction.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;This book is written for software apprentices—for people who have had a taste of developing software and want to take it further, but need some guidance.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;An apprenticeship is a season in your career when your focus is more on your own growth than almost anything else.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;There are many other books we would recommend for people in those roles, but this book is for people at the beginning of the journey.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The strongest patterns are the ones that are applied productively over and over again.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;All the advice that has come out of our revolution does not help much until it becomes second nature. The craftsmanship movement in software recognizes that making this stuff second nature isn’t, well, second nature. These patterns are a welcome contribution to this progression.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;He who knows not and knows not that he knows not, is a fool — shun him!
He who knows not and knows that he knows not, is unlearned — teach him!
He who knows and knows not that he knows, is asleep — awaken him!
He who knows and knows that he knows, is enlightened — follow him!&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A pattern is a named description of a recurring solution to a problem in a given context.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Patterns are meant to be open to modification to fit your circumstances rather than mechanically applied.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;As with all pattern languages, you should be careful not to overuse these patterns. Don’t look for excuses to use every single pattern, but instead pick and choose the most appropriate set for your situation.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The journey discussed here starts with “Hello world!”, but where does it end? Far too often, it ends with a promotion to middle management.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The journey discussed here starts with “Hello world!”, but where does it end? Far too often, it ends with a promotion to middle management. Too many talented people thoughtlessly take that promotion and find themselves just a few years later in jobs they don’t enjoy and yearning for retirement. But for those who have a knack for developing software and enjoy the learning process, software development is a career that can last a lifetime, and it can be a great ride.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;For any programmer proficient in his first language, it’s always a temptation to fall back to the standards and idioms of your native language when you’re learning a new language.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Our goal here is not simply to hand people a rule book, but to give them the ability to create new practices for new contexts, which in turn drives the discipline of software development forward.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;An attachment to Carol Dweck’s research, which calls for a “growth mindset.” This entails a belief that you can be better and everything can be improved if you’re prepared to work at it. In her words, “effort is what makes you smart or talented” (Mindset, p. 16), and failure is merely an incentive to try a different approach next time. It is the opposite of the belief that we’re all born with a given amount of talent, and that failure is an indication that you don’t have enough of it.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A need to always be adapting and changing based on the feedback you get from the world around you.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A desire to be pragmatic rather than dogmatic.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A belief that it is better to share what we know than to create scarcity by hoarding it.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A willingness to experiment and be proven wrong. This means we try stuff. We fail. Then we use the lessons from that failure in the next experiment.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A dedication to what psychologists call an internal locus of control.[6] This involves taking control of and responsibility for our destinies rather than just waiting for someone else to give us the answers.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Instead, we think that a useful system should be able to identify and absorb the best ideas from all elements of the software development community.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;“I guess it basically means having the attitude that there’s always a better/smarter/faster way to do what you just did and what you’re currently doing. Apprenticeship is the state/process of evolving and looking for better ways and finding people, companies and situations that force you to learn those better/smarter/faster ways.”&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;“It is not an internal quantity that is fed by easy successes and diminished by failures&amp;hellip;. It is not something we give to people by telling them about their high intelligence. It is something we equip them to get for themselves—by teaching them to value learning over the appearance of smartness, to relish challenge and to use errors as routes to mastery”&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;you must learn to grow yourself, to learn how you learn.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;At some point, an apprentice is approached by a master or a journeyman and told that her work and her role in the community are that of a journeyman. In such a case, the apprentice had previously begun taking on more responsibilities, and like a “boiled frog” had made a gradual but not discrete transition from one state to another. That transition may take longer for some people than for others. For some, the transition may take longer than their professional careers.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The journeyman’s responsibilities are wider than those of an apprentice. As such his failures can do more harm. Some of the patterns we will discuss are not appropriate for a journeyman, precisely because he has a greater responsibility to others who may see him as a mentor.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;They might be facing overbearing and/or incompetent managers, de-motivated coworkers, impossible deadlines, and work environments that treat novice developers like workhorses, storing them in small, rectangular stalls with a PC and a crippled Internet connection.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The more experience you already have, the more effort you will need to put into “emptying your cup,” clearing your mind of bad habits, setting aside the pride you have in your skills, and opening yourself up to the different, often counterintuitive, approaches of your more experienced colleagues.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;One of the fundamental ways to improve the experience of learning your first language is to have an actual problem to solve.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;It is possible to learn a language on your own, but it takes a long time to learn the spirit of a language unless you interact with experts.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;One danger of digging deep into your first language is getting stuck. It likely will remain with you throughout your career as your native tongue.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Apprentices comfortable with an object-oriented language should explore a functional programming language. Apprentices comfortable with dynamic typing should explore static typing. Apprentices comfortable with server-side programming should explore user interface design.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;You shouldn’t be wedded to any particular technology, but have a broad enough background and experience base to allow you to choose good solutions in particular situations.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;never stopping to think that the freedom to be foolish might well be one of the keys to the genius’s success.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Find an opportunity to unlearn something. Ideally, this would be something that forces you to put aside your previous experience.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Ask that person to explain some of the misconceptions that people from your particular background usually have about their community.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Despite (and because of!) your inexperience, you bring some unique attributes to your team, including an infectious enthusiasm. Do not allow anyone to dampen your excitement for the craft—it is a precious commodity and will accelerate your learning.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;They either repress their enthusiasm altogether, or allow it to manifest only outside of their day jobs.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Comprehension can be increased if more levels of experience are connected, as when newcomers who take nothing for granted interrelate more often with old-timers who think they have seen it all.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Craftsmen learn from the apprentices, even as the apprentices learn from them. Enthusiastic beginners not only renew the craftsmen, but also challenge the craftsmen by bringing in new ideas from the outside. A well chosen apprentice can make even a master craftsman more productive.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Collect the CVs of people whose skills you respect.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;According to research by the social psychologist Carol Dweck, the need to appear competent is ingrained into people of most industrialized societies.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Software craftsmen build their reputations through strong relationships with their clients and colleagues.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Expertise is a by-product of the long road we’re all on, but it is not the destination. Over the course of their journey, craftsmen will work with countless technologies and domains.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;However, as an apprentice with aspirations to mastery, you need to be willing to Expose Your Ignorance as well.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Remember that learning in public is one of the ways in which an apprentice begins the transition to journeyman. It’s a small step from learning where people can see you to teaching.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;One of the distinguishing facets of the craft approach is a willingness to put the wider interests of your community before your own, rather than using the team and the client to further your personal growth.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;This new knowledge you have may reveal gaps you hadn’t noticed before; don’t forget to add these things to your list.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;It’s your responsibility to offset the risks of this approach by Finding Mentors and Kindred Spirits who can provide help when you need it.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Dave saw that although these exceptional people were miles ahead of him, they were all walking the same road.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;you should keep in mind the expectation that you will be a working software developer even when you are middle-aged.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;And rather than counting the days to retirement, the craftsman will willingly and joyfully work into her final decades.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Imagine that 40 years from now you are asked to write a short description of your professional history and the biggest influences on your path. Use the output from that thought experiment to help you plan your future career choices.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The things we build for customers can be beautiful, but must be useful.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;utility and beauty are not opposed, but interdependent.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Sometimes you will make the wrong trade-off, and fixing that mistake by rewriting the system from scratch may not be in the customer’s best interest. In those situations you will need to develop the ability to refactor and repair.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Anyone who has ever seen a programmer at work&amp;hellip;knows that programming itself, if the programmer is given the chance to do it his way, is the biggest motivation in programming.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;“I’d like to learn something new, but what I already know pays too well.”&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Your mother might think you deserve it, but impressive titles and responsibilities do not indicate that your apprenticeship is over.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;more time with your family or more money, or perhaps a new vocation has captured your attention.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;If and when they came back, we welcomed them with open arms because those experiences had given them new perspectives they could share. Sadly, conventional software organizations may not be so welcoming. They often see these detours as suspicious gaps in your career that you must justify. They will expect you to have a rationale that makes sense within their value system for why you left and why you’re coming back.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Be the lion’s tail rather than the fox’s head!&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Organizational cultures that encourage software craftsmanship are rare.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Andy Hunt, a highly respected software craftsman, has asserted numerous times that software development is composed of two primary activities: learning and communication&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;We would build on that idea and assert that the core theme of an apprenticeship is learning and the dominant trait of a successful apprentice is a demonstration of her learning abilities.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;The only people who achieve much are those who want knowledge so badly that they seek it while the conditions are still unfavourable.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Apprentices are thirsty for opportunities to replace their ignorance with skill.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;A good way to ensure you have interesting exercises to use in your practice sessions is to trawl through old books like Programming Pearls, More Programming Pearls, or Etudes for Programmers.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Over time, maintaining a wiki can teach you about HTTP, REST, parsing, web design, caching, full-text search, databases, and concurrency.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Your notebook, blog, or wiki should be a nursery, not a graveyard—lessons should be born from this record, rather than going there to die.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Early in your apprenticeship, develop the habit of regularly sharing the lessons you have learned. This may take the form of maintaining a blog or running “brown bag” sessions amongst your Kindred Spirits.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Furthermore, teaching is a powerful learning tool for the person doing the teaching, perhaps even more so than for the students. Thus the old saying “When one person teaches, two people learn.”&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Ingenuity is often misunderstood. It is not a matter of superior intelligence but of character. It demands more than anything a willingness to recognize failure, to not paper over the cracks, and to change. It arises from deliberate, even obsessive, reflection on failure and a constant searching for new solutions. —Atul Gawande, Better&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Be sure to intermingle classics with modern, pragmatic books and/or articles in your Reading List.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;This means that the next time someone talks to you about Representation State Transfer, better known as REST, you should take that as an excuse to read Roy Fielding’s PhD thesis in which he defined the concept.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Armed with your deeper knowledge of HTTP, try to implement a client and a server for RFC 707.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;We can guarantee that the tools you use as an apprentice will be obsolete by the time you become a journeyman. In time, all of your favorite tools will become junk. For your career to prosper, you must learn to acquire and abandon familiar tools with ease.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;When we say that something is a craft, one of the things we mean is that it is a discipline and a tradition that places a high value on skill. This includes acquiring, growing, and eventually transmitting that skill. We believe true mastery is shown in the effect you have on others by transmitting your superior skill.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;In software development, we don’t know exactly what constitutes mastery, but we do know what it isn’t.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;As an apprentice, you should aim to become better than your teachers. And if they are good teachers, they should try to help you achieve that goal.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;Mere genius is not mastery, but if a person is able to train others to equal or surpass her genius, then it becomes evident that person is a potential master.&lt;/p&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;there are no masters&amp;hellip;yet.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>KISS Prensibi</title>
      <link>https://erkanerol.github.io/post/kiss/</link>
      <pubDate>Sat, 14 May 2016 16:15:53 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/kiss/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Basitlik nihai karmaşıklıktır.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/Simplicity.jpg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;programlama-prensibi:420e591348e6c9d5196d6c45959f9c13&#34;&gt;Programlama Prensibi&lt;/h2&gt;

&lt;p&gt;KISS&lt;/p&gt;

&lt;h2 id=&#34;açılımlar:420e591348e6c9d5196d6c45959f9c13&#34;&gt;Açılımlar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Keep It Simple, Stupid&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Keep it Simple, Silly&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Keep It Short and Simple&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Keep It Simple and Straightforward&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Keep It Small and Simple&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;açıklama:420e591348e6c9d5196d6c45959f9c13&#34;&gt;Açıklama&lt;/h2&gt;

&lt;p&gt;KISS, basitlik için çabalamayı öneren bir prensiptir. 1960&amp;rsquo;lı yıllarda Amerikan donanmasında ilk olarak ifade edilen bu prensip günümüzde en önemli programlama prensiplerinden biridir. Bir problemi çözerken olabilecek en basit ve yalın çözümü seçmeyi önerir. Hatta o kadar basit olmalıdır ki ilk bakışta &amp;ldquo;Bunu bir aptal bile yapar ve anlar&amp;rdquo; demeliyiz.&lt;/p&gt;

&lt;p&gt;KISS, karmaşık çözümlerin daha &amp;ldquo;zekice&amp;rdquo;  çözümler olduğu fikrini reddeder. Çoğu mühendis/yazılımcı karmaşık çözümler bularak, karmaşık yapılar inşa ederek &amp;ldquo;zekice&amp;rdquo; işler yaptığını düşünür. Dışarıdan bakan bir insan ne kadar zor anlar ise o kadar artı değer ürettiğini sanır. Ancak zor olan basitleştirmektir. Yazılım süreçlerinde kod/yazılım mimarisi zaten zaman içinde büyüme ve karmaşıklaşma eğilimindedir. Önemli ve zor olan istenen işlevselliği asgari karmaşıklık düzeyinde sağlayabilmektir.&lt;/p&gt;

&lt;p&gt;Basit çözümler daha iyidir çünkü:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basit çözümlerin uygulanması daha kolaydır.&lt;/li&gt;
&lt;li&gt;Basit çözümler hataya daha az açıktır.&lt;/li&gt;
&lt;li&gt;Basit çözümlerin bakımını yapmak daha kolaydır. Zaman tasarrufu sağlar.&lt;/li&gt;
&lt;li&gt;Basit çözümler kolay değiştirilebilir. Çevik olma açısından gereklidir.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;yöntemler:420e591348e6c9d5196d6c45959f9c13&#34;&gt;Yöntemler&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Zekanızı kodun karmaşıklığı üzerinden göstemeyin.&lt;/li&gt;
&lt;li&gt;Ufak çaplı performans kazançları için basit çözümler yerine karmaşık çözümleri tercih etmeyin.&lt;/li&gt;
&lt;li&gt;Problemleri alt problemlere ayırın. Alt problemleri az parametreli, kısa methodlar ile çözün.&lt;/li&gt;
&lt;li&gt;İstisnai durumları çok fazla düşünüp yapıyı karmaşıklaştırmayın.&lt;/li&gt;
&lt;li&gt;Geleceğin problemlerini bugünden çözmeye çalışmayın. (bkz: YAGNI)&lt;/li&gt;
&lt;li&gt;Kod silmekten çekinmeyin. En iyi kod en kısa koddur.&lt;/li&gt;
&lt;li&gt;Kodu yeniden düzenlemekten çekinmeyin. IDE&amp;rsquo;lerin de yardımıyla kodunuzu sık sık bölüp, sadeleştirin.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;kaynakça:420e591348e6c9d5196d6c45959f9c13&#34;&gt;Kaynakça&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://principles-wiki.net/principles:keep_it_simple_stupid&#34;&gt;http://principles-wiki.net/principles:keep_it_simple_stupid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;https://en.wikipedia.org/wiki/KISS_principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://people.apache.org/~fhanik/kiss.html&#34;&gt;https://people.apache.org/~fhanik/kiss.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pratikprogramci.com/2014/06/01/en-basit-cozumu-olusturma-yetisi-nasil-kazanilir/&#34;&gt;http://www.pratikprogramci.com/2014/06/01/en-basit-cozumu-olusturma-yetisi-nasil-kazanilir/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Fikirden Ürüne Yazılım Geliştirme Süreçleri (Ücretsiz Ders)</title>
      <link>https://erkanerol.github.io/post/udacity-course/</link>
      <pubDate>Mon, 14 Mar 2016 22:33:53 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/udacity-course/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Udacity üzerinden ücretsiz alabileceğiniz, yazılım mühendisliğine giriş niteliğindeki bu ders hali hazırda bildiğimiz bir çok şeyi içerse de bilmediğimiz bir çok püf noktasını da içinde barındırıyor. Özellikle yazılım geliştirmeye yeni başlamış herkesin alması gerektiğine inanıyorum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dersi &lt;a href=&#34;https://www.udacity.com/course/software-development-process--ud805&#34;&gt;şurada&lt;/a&gt; bulabilirsiniz. Ayrıca dersin içeriğini de aşağıya ekledim.&lt;/p&gt;

&lt;h5 id=&#34;lesson-1-introduction-and-overview:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 1: Introduction and Overview&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Importance of Software Engineering&lt;/li&gt;
&lt;li&gt;Discipline of Software Engineering&lt;/li&gt;
&lt;li&gt;The Software Crisis&lt;/li&gt;
&lt;li&gt;Software Phases&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-2-life-cycle-models:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 2: Life Cycle Models&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Introduction with Barry Bohem&lt;/li&gt;
&lt;li&gt;Requirements Engineering&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Maintenance&lt;/li&gt;
&lt;li&gt;Software Process Model Introduction&lt;/li&gt;
&lt;li&gt;Waterfall Process&lt;/li&gt;
&lt;li&gt;Spiral Process&lt;/li&gt;
&lt;li&gt;Evolutionary Prototyping Process&lt;/li&gt;
&lt;li&gt;Rational Unified Process&lt;/li&gt;
&lt;li&gt;Agile Process&lt;/li&gt;
&lt;li&gt;Choosing a Model&lt;/li&gt;
&lt;li&gt;Lifecycle Documents&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-3-integrated-development-environment:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 3: Integrated Development Environment&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Eclipse Introduction&lt;/li&gt;
&lt;li&gt;IDE Overview&lt;/li&gt;
&lt;li&gt;Plug-Ins&lt;/li&gt;
&lt;li&gt;Eclipse Demo: Create Java Project&lt;/li&gt;
&lt;li&gt;Eclipse Demo: Create a Class&lt;/li&gt;
&lt;li&gt;Eclipse Demo: Run Configuration&lt;/li&gt;
&lt;li&gt;Eclipse Demo: Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-4-version-control-systems:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 4: Version Control Systems&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Interview with John Britton&lt;/li&gt;
&lt;li&gt;Version Control System Introduction&lt;/li&gt;
&lt;li&gt;Two Main Types of VCS&lt;/li&gt;
&lt;li&gt;Introduction to Git&lt;/li&gt;
&lt;li&gt;Git Workflow&lt;/li&gt;
&lt;li&gt;Git Demo: Intro to Git&lt;/li&gt;
&lt;li&gt;Git Demo: Git + Eclipse&lt;/li&gt;
&lt;li&gt;Git Demo: Github&lt;/li&gt;
&lt;li&gt;Git Recap: Local Repositories&lt;/li&gt;
&lt;li&gt;Git Recap: Remote Repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-5-requirements-engineering:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 5: Requirements Engineering&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Interview with Jane Cleland-Huang&lt;/li&gt;
&lt;li&gt;General RE Definition&lt;/li&gt;
&lt;li&gt;Software Intensive Systems&lt;/li&gt;
&lt;li&gt;Functional and Nonfunctional Requirements&lt;/li&gt;
&lt;li&gt;User and System Requirements&lt;/li&gt;
&lt;li&gt;Modeling Requirements&lt;/li&gt;
&lt;li&gt;Analyzing Requirements&lt;/li&gt;
&lt;li&gt;Requirements Prioritization&lt;/li&gt;
&lt;li&gt;Requirements Engineering Process&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-6-oo-software-and-uml:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 6: OO Software and UML&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Object Orientation Introduction&lt;/li&gt;
&lt;li&gt;UML Structural Diagrams: Class Diagrams&lt;/li&gt;
&lt;li&gt;Class Diagram: Creation Tips&lt;/li&gt;
&lt;li&gt;UML Structural Diagrams: Component Diagram&lt;/li&gt;
&lt;li&gt;UML Structural Diagram: Deployment Diagram&lt;/li&gt;
&lt;li&gt;UML Behavioral Diagram: Use Case&lt;/li&gt;
&lt;li&gt;Use Case Diagram: Creation Tips&lt;/li&gt;
&lt;li&gt;UML Behavioral Diagrams: Sequence&lt;/li&gt;
&lt;li&gt;UML Behavioral Diagrams: State Transition Diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-7-software-architecture:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 7: Software Architecture&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Interview with Nenad Medvidovic&lt;/li&gt;
&lt;li&gt;What is Software Architecture?&lt;/li&gt;
&lt;li&gt;Prescriptive vs. Descriptive Architecture&lt;/li&gt;
&lt;li&gt;Architectural Evolution&lt;/li&gt;
&lt;li&gt;Architectural Degradation&lt;/li&gt;
&lt;li&gt;Architectural Recovery&lt;/li&gt;
&lt;li&gt;Architectural Elements&lt;/li&gt;
&lt;li&gt;Components, Connectors, and Configuration&lt;/li&gt;
&lt;li&gt;Deployment Architectural Perspective&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-8-a-tale-of-analysis-and-design:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 8: A Tale of Analysis and Design&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Analyzing Requirements&lt;/li&gt;
&lt;li&gt;Refining Classes and Attributes&lt;/li&gt;
&lt;li&gt;Adding Attributes&lt;/li&gt;
&lt;li&gt;Identifying Operations&lt;/li&gt;
&lt;li&gt;Refining the Class Diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-9-design-patterns:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 9: Design Patterns&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Patterns Catalogue&lt;/li&gt;
&lt;li&gt;Pattern Format&lt;/li&gt;
&lt;li&gt;Factory Method Pattern&lt;/li&gt;
&lt;li&gt;Strategy Pattern&lt;/li&gt;
&lt;li&gt;Choosing a Pattern&lt;/li&gt;
&lt;li&gt;Negative Design Patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-10-unified-software-process:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 10: Unified Software Process&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Use-Case Driven&lt;/li&gt;
&lt;li&gt;Inception Phase&lt;/li&gt;
&lt;li&gt;Elaboration Phase&lt;/li&gt;
&lt;li&gt;Construction Phase&lt;/li&gt;
&lt;li&gt;Transition Phase&lt;/li&gt;
&lt;li&gt;Phases and Iterations&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-11-general-concepts:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 11: General Concepts&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Failure, Fault and Error&lt;/li&gt;
&lt;li&gt;Verification Approaches&lt;/li&gt;
&lt;li&gt;Pros and Cons of Approaches&lt;/li&gt;
&lt;li&gt;Testing Introduction&lt;/li&gt;
&lt;li&gt;Testing Granularity Levels&lt;/li&gt;
&lt;li&gt;Alpha and Beta Testing&lt;/li&gt;
&lt;li&gt;Black and White Box Testing Introduction&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-12-black-box-testing:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 12: Black-Box Testing&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Systematic Functional Testing Approach&lt;/li&gt;
&lt;li&gt;Test Data Selection&lt;/li&gt;
&lt;li&gt;Category Partition Method&lt;/li&gt;
&lt;li&gt;Produce and Evaluate Test Case Specifications&lt;/li&gt;
&lt;li&gt;Generate Test Cases from Test Case Specifications&lt;/li&gt;
&lt;li&gt;Model Based Testing&lt;/li&gt;
&lt;li&gt;Finite State Machines&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-13-white-box-testing:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 13: White-Box Testing&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Coverage Criteria Intro&lt;/li&gt;
&lt;li&gt;Statement Coverage&lt;/li&gt;
&lt;li&gt;Control Flow Graphs&lt;/li&gt;
&lt;li&gt;Test Criteria Subsumption&lt;/li&gt;
&lt;li&gt;MC/DC Coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-14-agile-development-methods:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 14: Agile Development Methods&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Cost of Change&lt;/li&gt;
&lt;li&gt;Agile Software Development&lt;/li&gt;
&lt;li&gt;Extreme Programming (XP)&lt;/li&gt;
&lt;li&gt;XP’s Values and Principles&lt;/li&gt;
&lt;li&gt;Test First Development&lt;/li&gt;
&lt;li&gt;Refactoring&lt;/li&gt;
&lt;li&gt;Pair Programming&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;li&gt;Testing Strategy&lt;/li&gt;
&lt;li&gt;High Level Scrum Process&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;lesson-15-software-refactoring:7929949883dbed75c597001fa4dc35a0&#34;&gt;Lesson 15: Software Refactoring&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Reasons to Refactor&lt;/li&gt;
&lt;li&gt;Refactoring Demo&lt;/li&gt;
&lt;li&gt;Refactoring Risks&lt;/li&gt;
&lt;li&gt;Cost of Refactoring&lt;/li&gt;
&lt;li&gt;When Not to Refactor&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to version a JavaEE Web application with Maven and Git</title>
      <link>https://erkanerol.github.io/post/versioning-git-maven/</link>
      <pubDate>Thu, 11 Feb 2016 22:02:50 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/versioning-git-maven/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;In this post, I will show how to version a JavaEE Web Application.
The example project is &lt;a href=&#34;https://github.com/erkanerol/versioning_javaee_maven_git&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/screenshot.png&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;1-create-a-maven-project-and-add-your-dependencies:64f1b32d3d75573502676ca900d4fe56&#34;&gt;1. Create a maven project and add your dependencies.&lt;/h5&gt;

&lt;h5 id=&#34;2-add-your-scm-url-s-to-pom-xml:64f1b32d3d75573502676ca900d4fe56&#34;&gt;2. Add your scm url&amp;rsquo;s to pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;scm&amp;gt;
    &amp;lt;url&amp;gt;
        https://github.com/erkanerol/versioning_javaee_maven_git
    &amp;lt;/url&amp;gt;
    &amp;lt;connection&amp;gt;
       scm:git:git://github.com/erkanerol/versioning_javaee_maven_git.git
    &amp;lt;/connection&amp;gt;
    &amp;lt;developerConnection&amp;gt;
        scm:git:git@github.com:erkanerol/versioning_javaee_maven_git.git
    &amp;lt;/developerConnection&amp;gt;
&amp;lt;/scm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-define-time-format-in-pom:64f1b32d3d75573502676ca900d4fe56&#34;&gt;3. Define time format in pom.&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;properties&amp;gt;
        &amp;lt;maven.build.timestamp.format&amp;gt;
            dd.MM.yyyy_HH_mm
        &amp;lt;/maven.build.timestamp.format&amp;gt;
        &amp;lt;buildDate&amp;gt;
            ${maven.build.timestamp}
        &amp;lt;/buildDate&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-add-mojo-plugin-in-pom-xml:64f1b32d3d75573502676ca900d4fe56&#34;&gt;4. Add mojo plugin  in pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;buildnumber-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
    &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;
            &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;create&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;shortRevisionLength&amp;gt;5&amp;lt;/shortRevisionLength&amp;gt;
        &amp;lt;doCheck&amp;gt;false&amp;lt;/doCheck&amp;gt;
        &amp;lt;doUpdate&amp;gt;false&amp;lt;/doUpdate&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;5-add-version-properties-to-your-resource-directory:64f1b32d3d75573502676ca900d4fe56&#34;&gt;5. Add version.properties to your resource directory&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
version=${version}.${buildNumber}
versionLong=${version}.${buildNumber}.${buildDate}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;6-add-your-resource-folder-in-pom-xml:64f1b32d3d75573502676ca900d4fe56&#34;&gt;6. Add your resource folder in pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;resources&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
    &amp;lt;/resource&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
        &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
    &amp;lt;/resource&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;7-create-an-application-scoped-bean:64f1b32d3d75573502676ca900d4fe56&#34;&gt;7. Create an application scoped bean&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

package com.erkanerol.example.versioning;

import java.io.IOException;
import java.io.Serializable;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;


@ManagedBean
@ApplicationScoped
public class VersionBean implements Serializable {

    private String version;
    private String versionLong;
    
    @PostConstruct
    public void init(){
        
        try {
            Properties properties = new Properties();
            properties
                .load(this
                    .getClass()
                    .getClassLoader()
                    .getResourceAsStream(&#34;version.properties&#34;));
        
            version = properties.getProperty(&#34;version&#34;);
            versionLong = properties.getProperty(&#34;versionLong&#34;);
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }
        
    public String getVersion() {
        return version;
    }
    public void setVersion(String version) {
        this.version = version;
    }
    public String getVersionLong() {
        return versionLong;
    }
    public void setVersionLong(String versionLong) {
        this.versionLong = versionLong;
    }   
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;8-use-the-bean-in-your-application:64f1b32d3d75573502676ca900d4fe56&#34;&gt;8. Use the bean in your application.&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;h:outputText value=&#34;version #{versionBean.version}&#34; /&amp;gt;
&amp;lt;h:outputText value=&#34;long version #{versionBean.versionLong}&#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;recommendations:64f1b32d3d75573502676ca900d4fe56&#34;&gt;Recommendations&lt;/h2&gt;

&lt;p&gt;Use both long and short version in your application. Short version can be shown to users and long version can be shown in a spesific page like &amp;ldquo;/version.jsf&amp;rdquo;.
If your repository is private, you have to put git password in your pom.xml. You can create a different, read-only account.
You can put the version in name of war file. It makes easy to store executable files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Best Practice&#34; Üzerine Etkinlik Önerisi</title>
      <link>https://erkanerol.github.io/post/best-practice-event/</link>
      <pubDate>Sat, 09 Jan 2016 22:44:45 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/best-practice-event/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR
&lt;br&gt;&lt;/br&gt;
Bu yazıda &amp;ldquo;şöyle bir etkinlik olsa çok faydalı olur&amp;rdquo; dediğim bir etkinlik fikrini anlatacağım.
&lt;br&gt;&lt;/br&gt;
Özet: Belli senaryolar üzerinden, 3-4 uzmanın kendi en iyi uygulamalarını anlattığı, katılımcıların sorularıyla desteklediği etkinlikler olsa çok faydalı olabilir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yazılım Mühendisliği adı üzerinde &amp;ldquo;soft&amp;rdquo; olan bir şey. Sınırlandırmaları diğer mühendislik dallarına göre oldukça az. Aynı proje binlerce farklı yöntemle yapılabiliyor. Fakat bütün yöntemlerin/uygulamaların aynı kalitede sonuç verdiğini söylemek zor.  Yazılım Mühendisliği&amp;rsquo;nin temelleri ile ilgili okuduğum bir kitapta şöyle bir şey okumuştum: &amp;ldquo;Hiç bir  alanda iyiyle kötü arasındaki fark yazılımdaki kadar geniş değildir.&amp;rdquo; Bu noktada best practice diye nitelenen kavram işin içine giriyor.&amp;ldquo;Hangi uygulamayı hangi durumlarda kullanmak gerekir, avantajları ve dezavantajları nelerdir?&amp;rdquo; bilgisi bu farkı oluşturan başlıca unsurlardan biri. Maalesef bu tip bilgileri doğrudan kitaplardan öğrenmek o kadar kolay değil. (Varsa önerisi olan beklerim :) ) Zaman içinde çalışma hayatında tecrübe ederek öğrenilmesi bekleniyor. Bu da uzun bir zaman gerektiriyor.Bu süreci biraz hızlandırmalıyız diye düşünüyorum. Ayrıca tecrübelerin paylaşılması yeni bakış açıları kazanma açısından da çok önemli. Kendi bilgilerimizle rahatça çözdüğümüzü düşündüğümüz bir problemin çok daha kolay/iyi çözümleri olabilir.&lt;/p&gt;

&lt;p&gt;Öncelikle şunu belirteyim böyle bir şey Dünya&amp;rsquo;nın herhangi bir yerinde böyle bir şey yapılıyor mu bilmiyorum, araştırmadım. Yapılıyordur muhtemelen ama Türkiye&amp;rsquo;de hiç duymadım. (Oooo Erkan internet bağlatmışsın tarzı bir durum varsa bir haber edin plz.)&lt;/p&gt;

&lt;p&gt;Gelelim etkinliğe. Şöyle olsa süper olur:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Düzenleyici&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bir topluluk olabilir, bir organizasyon olabilir. Bu etkinlikler için kurulabilir. Ama süreklilik açısından 2-3 kişiye bağlı olmaması gerekir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Katılımcılar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 moderatör, 3 uzman yazılımcı (uzman derken öyle çok da abartmayalım gözümüzde),  20-30 katılımcı&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mekan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uzmanların ekranlarını rahatça yansıtabilecekleri, internet bağlantı probleminin yaşanmadığı bir mekan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zaman ve Süre&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hafta sonu, yarım günü geçmeyecek şekilde&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Konu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Konu çok genel olmamalıdır. Yazılım dili, framework&amp;rsquo;ler ve kullanılan teknolojiler olabildiğince tanımlanmalıdır. Mümkünse belirli senaryolar ve kısıtlamalar içermelidir.
Örnek vermek gerekirse: Java+Spring+Hibernate kullanılan bir uygulamada &amp;ldquo;soft delete&amp;rdquo; uygulamaları, dosya yönetimi (saklama, db ilişkilendirmeleri vs).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Önceden açıklanan konuyu moderatör katılımcılara açıklar.
Her uzman kendine göre &amp;ldquo;best practice&amp;rdquo; olan uygulamayı anlatır. Avantajlarını ve dezavantajlarını belirtir. Gerekli gördüğü yerlerde kod düzeyinde sunumlar yapar.
Uzmanlar diğer uzmanların uygulamaları hakkında eleştirilerde bulunur. Gerekirse geri vites yapar. &amp;ldquo;Doğru aslında böyle olsa daha iyi olabilir&amp;rdquo; der.
Katılımcılar çeşitli senaryolar üreterek uzmanların uygulamalarının eksik taraflarını çıkarmaya çalışır. Bu noktada uygulamaların tartıştıkça geliştirilmesi hedeflenmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Önemli Noktalar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Günün sonunda katılımcılar ve uzmanlar aynı &amp;ldquo;best practice&amp;rdquo; üzerinde anlaşmak zorunda değildir. Önemli olan farklı yöntemler ve bunların iyi/kötü yönlerini daha ayrıntılı öğrenmektir.
Edinilen tecrübeleri blog&amp;amp;repo olarak yayınlanmaya çalışılmalıdır.
Çeşitli parametrelere göre karşılaştırmalar yapılmalıdır. Kullanıcı sayısı, geliştirme süresi,istenen güvenlik seviyesi, ekleme-güncelleme-silme sıklığı vs okuma sıklığı&amp;hellip;&lt;/p&gt;

&lt;p&gt;Not: JavaEE, Spring, Hibernate, Jsf, Primefaces ile ilgili but tip etkinlere katılmak isterim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Farklı dillerin alfabelerine göre sıralama (Collator kullanımı)</title>
      <link>https://erkanerol.github.io/post/collator/</link>
      <pubDate>Sat, 09 Jan 2016 21:56:21 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/collator/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Java&amp;rsquo;da farklı dillerin alfabelerine göre sıralama yapmak mümkün.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/erkanerol/Examples/blob/master/src/com/erkanerol/examples/collator/CollatorExample.java&#34;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
package com.erkanerol.examples.collator;

import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;

public class CollatorExample {

    public static void main(String[] args) {
        
        ArrayList&lt;City&gt; list = new ArrayList&lt;City&gt;();
        list.add(new City(&#34;London&#34;));
        list.add(new City(&#34;Newyork&#34;));
        list.add(new City(&#34;Ankara&#34;));
        list.add(new City(&#34;Paris&#34;));
        list.add(new City(&#34;Venice&#34;));
        list.add(new City(&#34;Çankırı&#34;));

        Comparator&lt;City&gt; compDef = new Comparator&lt;CollatorExample.City&gt;() {
            @Override
            public int compare(City c0, City c1) {
                return c0.getName().compareTo(c1.getName());
            }
        };
        
        Comparator&lt;City&gt; compTr = new Comparator&lt;CollatorExample.City&gt;() {
            @Override
            public int compare(City c0, City c1) {
                Collator collator = Collator.getInstance(new Locale(&#34;tr&#34;,&#34;TR&#34;));
                return collator.compare(c0.getName(), c1.getName());
            }
        };
        
        Collections.sort(list,compDef);
        printList(list);
        Collections.sort(list,compTr);
        printList(list);
    }
    
    public static void printList(List&lt;City&gt; list){
        for(City c:list){
            System.out.println(c);
        }
        System.out.println(&#34;nn&#34;);
    }
    
    
    public static class City{
        private String name;
        
        public City(String name){
            this.name = name;                   
        }       
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        @Override
        public String toString(){
            return this.name;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;console:edbdc7a2ba1ea5e29368db936145cc65&#34;&gt;Console&lt;/h2&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Startup Playbook (Ekitap halinde)</title>
      <link>https://erkanerol.github.io/post/startup-playbook/</link>
      <pubDate>Sat, 07 Nov 2015 21:43:13 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/startup-playbook/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR &lt;br&gt;&lt;/br&gt;
Y Combinator Startup&amp;rsquo;lara yatırım yapan ve danışmanlık yapan bir şirket. Şirket çalışanlarından Sam Altman tecrübelerinden yola çıkarak yazdığı kısa bir Playbook yayınladı. Şu adresten okuyabileceğiniz yazıyı ekitap haline getirdim. Yazının sonundan dosyaları indirebilirsiniz.Altını çizdiğim yerler de aşağıda.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/startup-playbook-cover.jpeg&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your goal as a startup is to make something users love.&lt;/li&gt;
&lt;li&gt;A word of warning about choosing to start a startup: It sucks!&lt;/li&gt;
&lt;li&gt;To have a successful startup, you need: a great idea (including a great market), a great team, a great product, and great execution.&lt;/li&gt;
&lt;li&gt;If the idea does not really excite at least some people the first time they hear it, that’s bad.&lt;/li&gt;
&lt;li&gt;We also ask how the company will one day be a monopoly. There are a lot of different terms for this, but we use Peter Thiel’s. Obviously, we don’t want your company to behave in an unethical way against competitors. Instead, we’re looking for businesses that get more powerful with scale and that are difficult to copy.&lt;/li&gt;
&lt;li&gt;What if you don’t have an idea but want to start a startup? Maybe you shouldn’t. It’s so much better if the idea comes first and the startup is the way to get the idea out into the world.&lt;/li&gt;
&lt;li&gt;I think part of the problem is that good founders tend to have lots of good ideas (too many, usually).&lt;/li&gt;
&lt;li&gt;Tech startups need at least one founder who can build the company’s product or service, and at least one founder who is (or can become) good at sales and talking to users. This can be the same person.&lt;/li&gt;
&lt;li&gt;Here is the secret to success: have a great product. This is the only thing all great companies have in common.&lt;/li&gt;
&lt;li&gt;You have to get very close to your users. Literally watch them use your product.&lt;/li&gt;
&lt;li&gt;Don’t try to plan too far out, and definitely don’t batch everything into one big public release.&lt;/li&gt;
&lt;li&gt;The only universal job description of a CEO is to make sure the company wins.&lt;/li&gt;
&lt;li&gt;The prime directive of great execution is “Never lose momentum”. But how do you do it?&lt;/li&gt;
&lt;li&gt;Extreme internal transparency around metrics (and financials) is a good thing to do.&lt;/li&gt;
&lt;li&gt;The common mistake here is to focus on signups and ignore retention.&lt;/li&gt;
&lt;li&gt;A related trap is thinking about problems too far in the future—i.e. “How are we going to do this at massive scale?” The answer is to figure it out when you get there.&lt;/li&gt;
&lt;li&gt;Remember that sales and marketing are not bad words. Though neither will save you if you don’t have a great product, they can both help accelerate growth substantially.&lt;/li&gt;
&lt;li&gt;People who let themselves make a lot of excuses usually fail in general, and startup CEOs who do it almost always fail.&lt;/li&gt;
&lt;li&gt;A huge part of being a successful startup CEO is not giving up&lt;/li&gt;
&lt;li&gt;My first piece of advice about hiring is don’t do it.&lt;/li&gt;
&lt;li&gt;Finally, fire quickly.&lt;/li&gt;
&lt;li&gt;But 99% of startups die from suicide, not murder.&lt;/li&gt;
&lt;li&gt;Henry Ford: “The competitor to be feared is one who never bothers about you at all, but goes on making his own business better all the time.”&amp;rdquo;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Watch your cash flow obsessively.&lt;/li&gt;
&lt;li&gt;The secret to successfully raising money is to have a good company.&lt;/li&gt;
&lt;li&gt;Investors are driven by the dual fears of missing the next Google, and fear of losing money on something that in retrospect looks obviously stupid. (For the best companies, they fear both at the same time.)&lt;/li&gt;
&lt;li&gt;Remember that at least a thousand people have every great idea. One of them actually becomes successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/s/3zna1jyd87joay9/Startup%20Playbook%20-%20playbook.samaltman.com.epub?dl=0&#34;&gt;Epub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/s/3mpfejxuzp2x8gt/Startup%20Playbook%20-%20playbook.samaltman.com.mobi?dl=0&#34;&gt;Mobi&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Architecture Patterns (Ücretsiz Ekitap)</title>
      <link>https://erkanerol.github.io/post/software-architecture-patterns/</link>
      <pubDate>Sat, 03 Oct 2015 21:31:46 +0200</pubDate>
      
      <guid>https://erkanerol.github.io/post/software-architecture-patterns/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;TL;DR O&amp;rsquo;Reilly sitesinden ücretsiz indirebileceğiniz kısa,güzel bir kitabın özeti&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/software_design_cover.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Geçenlerde Hacker News üzerinden bulduğum bir yazıyı okurken sağ tarafta ücretsiz ekitap indirebileceğime dair bir şey görünce beleşçiliğim tuttu ve kitabı (mobi formatı da var 👏) indirdim. Kitabın temel uygulama mimarilerini uzatmadan (pdf versiyonu 55 sayfa) anlatması çok hoşuma gitti ve okudum. Benim için çok faydalı olduğunu söyleyebilirim. Bir çok terim öğrendim. Buradan önermeye karar verdim.&lt;/p&gt;

&lt;p&gt;Kitapta 5 ana mimariden söz ediliyor. Böyle bir mimari neden var, ne zaman gerekir, temel olarak nasıl çalışır kısaca anlatılmış. Her bölümün sonunda o bölümde anlatılan mimari belirli (Overall Agility, Deployment, Testability, Performance, Scalibility, Development) açılardan değerlendirilmiş. Mimari görselleri, değerlendirme tablosu ve kitabın linki aşağıda. İyi okumalar.&lt;/p&gt;

&lt;p&gt;Kitabın linki (ePub, Mobi, PDF&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/programming/free/software-architecture-patterns.csp&#34;&gt;http://www.oreilly.com/programming/free/software-architecture-patterns.csp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-layered-architecture:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;1. Layered Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/layered.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-event-driven-architecture:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;2. Event-Driven Architecture&lt;/h2&gt;

&lt;h3 id=&#34;a-mediator:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;a. Mediator&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/mediator.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;b-broker:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;b. Broker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/broker.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-microkernel-architecture:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;3. Microkernel Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/kernel.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-microservices-architecture-pattern:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;4. Microservices Architecture Pattern&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/microservices.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-space-based-architecture:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;5. Space-Based Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/space_based.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-pattern-analysis-summary:078222a688fd64eeaa84d4a3c8fdc645&#34;&gt;A. Pattern Analysis Summary&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/summary.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gölgede ve Güneşte Futbol - Eduardo Galeano</title>
      <link>https://erkanerol.github.io/post/golgede-ve-guneste-futbol/</link>
      <pubDate>Fri, 11 Sep 2015 20:41:00 +0200</pubDate>
      
      <guid>https://erkanerol.github.io/post/golgede-ve-guneste-futbol/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR   Kitabı okudum,beğendim.Tavsiye ediyorum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uzun betimlemelerden,derin analizlerden,anlaşılması güç metaforlardan yorulmuştum. Okuması kolay bir kitap arıyordum. Zihnimi yormayacak ama saçma sapan da olmayacak. Meritokrasi listemi gezerken Eduardo Galeano&amp;rsquo;nun Gölgede ve Güneşte Futbol isimli kitabı dikkatimi çekti. Kitabın girişindeki şu bölümü okuyunca Ntvspor&amp;rsquo;da  Bağış Erten ve Banu Yelkovan&amp;rsquo;ın sunduğu programının adının nereden esinlendiğini anlamış oldum ve tamamen okumaya karar verdim.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Okuyacağınız sayfalar, yıllar önce Calella de la Costa&amp;rsquo;da karşılaştığım çocuklara ithaf edilmiştir. Futbol oynamaktan dönen o çocuklar bir şarkı tutturmuşlardı:   &amp;ldquo;Yensek de, yenilsek de, değişmez eğlencemiz&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/golgede-guneste-futbol-kapak.jpg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Kitap beklediğimden güzel çıktı. Galeano Uruguaylı sosyalist bir yazar. Ve bir futbol tutkunu. Futbola ortalama bir entelektüel gibi bakmıyor ve durumu şöyle ifade ediyor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Futbol, Tanrıya ne yönüyle benzer? Hemen söyleyeyim: Birçok insanın ona inanmasıyla ve entelektüellerin ona kuşkuyla yaklaşmasıyla.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Ben basit bir &amp;lsquo;iyi futbol dilencisiyim&amp;rsquo;. Elimde şapkam, dünyanın dört bir yanını geziyor ve stadyumlarda yalvarıyorum: &amp;lsquo;Tanrı rızası için, güzel bir maç lütfen.&amp;rsquo; &amp;ldquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kitabın başında futbolun ögeleri üzerine yorumlar var.Oyuncu,kaleci,yıldız,taraftar,teknik direktör,fanatik,hakem vb. Sonra biraz futbolun tarihinden söz ediyor Galeano. Kitap boyunca sık sık endüstriyel futboldan yakınıyor ve aslında eskiye nazaran estetikten yoksun ve makineleşmiş bir oyun izlediğimizden söz ediyor. Dediklerine bakılacak olursa oyun seneler içinde çok değişmiş.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yirminci yüzyılda futbolun öyküsü olarak kabul edilen ve cesaretten korkuya doğru katedilen mesafe, esasında 2-3-5&amp;rsquo;ten yola çıkılarak, 4-3-3, 4-4-2 üzerinden 5-4-1&amp;rsquo;e varışın öyküsüdür.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yukarıda bahsettiğim gibi Galeano bir sosyalist ve futbola dair siyasal perspektifli bir çok yorumu kitapta mevcut. FIFA&amp;rsquo;yı zalim bir devlet ve FIFA başkanlarını birer diktatör gibi anlatıyor kitap boyunca.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;FIFA futbolcularla muhatap olmaz,&amp;rdquo; diye cevap verdi Blatter. &amp;ldquo;Onlar kulüplerin işçileridir.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;João Havelange dünya futbolunun tahtından inerken yerine krallığın en kıdemli saraylısı Joseph Blatter kuruluyordu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kitabın devamı Dünya Kupaları tarihi gibi biraz. 1930&amp;rsquo;dan başlayarak günümüze doğru kupaları birer birer anlatıyor yazar ve her kupada öne çıkan maçları,takımları,yıldızları edebi bir dil ile aktarıyor bize. Kupalardan söz etmeden önce Dünya&amp;rsquo;nın o anki durumundan da bahsediyor.Kupa tarihine paralel bir Dünya tarihi mevcut sizin anlayacağınız. Fidel Castro ile ilgili olan kısım 1962&amp;rsquo;den 2010 kadar hep aynı kalması benim en çok ilgimi  çeken kısım oldu. 2002 anlatımlarında Türkiye de var ama açıkçası ben daha çok bahsetmesini beklerdim. Elediğimiz Senegal&amp;rsquo;i daha çok anlatmış :( Aşağıdaki paragraf 1978 Dünya Kupası&amp;rsquo;nın giriş bölümü.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Almanya&amp;rsquo;da halkın sevgilisi kaplumbağa Volkswagen, dönemini kapatırken İngiltere&amp;rsquo;de ilk tüp bebek dünyaya geliyordu. İtalya&amp;rsquo;da da çocuk düşürme yasallaşıyordu. Yüzyılın vebası AIDS ilk kurbanlarını veriyordu. Kızıl Tugaylar Aldo Moro&amp;rsquo;yu katlederlerken, Amerika Birleşik Devletleri yüzyılın başından beri kullandığı kanalı Panama&amp;rsquo;ya devretme vaadinde bulunuyordu. Miami&amp;rsquo;deki güvenilir kaynaklardan gelen haberlere bakılırsa Fidel Castro her an devrilebilirdi. Nikaragua&amp;rsquo;da Somoza&amp;rsquo;nın iktidarı son buluyor, İran&amp;rsquo;da da şahın saltanatı sallanıyordu. Guatemala&amp;rsquo;da askerler Panzos Köyünde halkı mitralyözlerle tarıyorlardı. Domitila Barrios, Bolivya&amp;rsquo;nın askeri diktatörüne karşı bakır madenlerinde çalışan dört kadınla birlikte açlık grevine başlıyor ve bütün Bolivya&amp;rsquo;nın onu desteklemesi üzerine diktatör devriliyordu. Arjantin&amp;rsquo;deki diktatörlük yerinde saymaya devam ederken, sanki gücünü kanıtlamak istercesine On Birinci Dünya Futbol Şampiyonasına ev sahipliği yapıyordu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bu da 2010 girişinden bir paragraf.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;İsrail, dünyada antisemitizmin dehşet verici sonuçlarının sorumluları, kendileri de Sami olan Filistinlilermişçesine yürüttüğü ve Filistinlileri cezalandırmayı hedefleyen alışılmış suç eylemlerinden birinde, Filistin&amp;rsquo;e yiyecek, ilaç ve oyuncak götüren gemileri uluslararası sularda makinalı tüfeklerle tarıyordu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neyse lafı uzatmayayım. Kitabı tavsiye ediyorum. Son olarak altını çizdiğim bir kaç yeri paylaşıyorum. Tamamı &lt;a href=&#34;https://www.goodreads.com/review/show/1386715632?type=review&#34;&gt;burada&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Artık daha çok koşuluyor, ama daha az riske giriliyor. Çünkü cesaret kâr sağlamamaktadır. 54 Dünya Kupası ile 94 Dünya Kupası arasında geçen kırk yılda atılan gollerin sayısında önemli bir azalma görülmektedir; bu sayı şimdi yarıya düşmüştür, bu yüzden 1994&amp;rsquo;te beraberlikleri azaltmak amacıyla galibiyetlere iki puan yerine üç puan verilmesi karara bağlandı.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Zoolog Roberto Fontanarrosa&amp;rsquo;nın dediği gibi, Pandalar ve forvet oyuncuları soyları tükenmekte olan türler!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kendisi gibi Brezilyalı olan ünlü topçu Pelé&amp;rsquo;den bile daha fazla gol attı, profesyonel futbolun en fazla gol atan oyuncusu Brezilyalı Pelé 1.279 gol atmıştı. Friedenreich&amp;rsquo;in ise 1.329 golü vardı.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Buna rağmen hiçbir Uruguaylı yoktur ki kendini futbolda taktik ve strateji uzmanı ve futbol tarihi konusunda bilgin saymasın.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gerçekten böyle bir insan varmış :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hindistan tarihinde ilk kez bir kadın iktidara geliyordu: İndira Gandi.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Yazılım Mühendisi olmak veya Stackoverflow Google&#39;lamak</title>
      <link>https://erkanerol.github.io/post/yazilim-muhendisi-olmak-veya-stackoverflow-googlelamak/</link>
      <pubDate>Mon, 24 Aug 2015 20:40:00 +0200</pubDate>
      
      <guid>https://erkanerol.github.io/post/yazilim-muhendisi-olmak-veya-stackoverflow-googlelamak/</guid>
      <description>&lt;p&gt;Geçenlerde gördüğüm zaytung tarzı bir haber beni epey güldürmüştü ve hemen arkadaşlarımla paylaşmıştım. Haber şöyleydi: IEEE, bilgisayar programlama disiplininin bundan sonra resmi olarak &amp;ldquo;Stackoverflow google&amp;rsquo;lamak&amp;rdquo; olarak yeniden adlandırılmasına ilişkin şiddetli tavsiye içeren bir rapor yayınladı. Haber komik olmakla birlikte çok büyük bir gerçeğe işaret ediyor bana kalırsa. Bu yazıda bu konuya ilişkin bir kaç şeyden söz etmeye çalışacağım. (bkz: abstract)&lt;/p&gt;

&lt;p&gt;Bir aydan kısa bir süredir Java tabanlı web yazılımları geliştirmekle meşgulüm. Öncesinde pek bir şey bildiğim söylenemez. Uzun uzun projede kullanılan araçları öğrenme fırsatım da olmadı. Lazım oldukça kısa kısa bakıyorum. Gün içerisinde onlarca sorun ile karşılaşıyorum ve yine onlarca kez  sorunu Google&amp;rsquo;da aratıyorum. Google sağolsun yazdığım anahtar kelimelerden uygun sayfayı bulup önüme koyuyor. Soruyu bile okumadan sayfayı aşağı çekip cevaba bakıyorum hemen. Eğer yüksek oy almış bir cevap varsa soruya bakıyorum. Sorun benzerse çözümü deniyorum. Olursa ne ala. Olmazsa diğer sorulara ve önerilere geçiyorum. Aslında yaptığım iş tam olarak Google&amp;rsquo;lamak. Öyle sanıyorum ki Türkiye&amp;rsquo;deki meslektaşlarımın (hayatımda ilk kez kullandım bu kelimeyi, hoşuma gitti şu anda) önemli bir bölümü de işi böyle yürütüyor. Hatta &amp;ldquo;Stackoverflow kapansa Dünya genelindeki yazılım geliştirme hızı yarı yarıya azalır.&amp;rdquo; diye bir iddiam bile var. Özetle stackoverflow yazılımcılar için bulunmaz nimet. stackexchange.com&amp;rsquo;un içindeki diğer topluluklar da gittikçe gelişiyor ve çok faydalı. Bir göz atmanızı öneririm.&lt;/p&gt;

&lt;p&gt;FAKAT bir sorun var. Sadece çözümü kopyalamak hem bana çok bir şey öğretmiyor hem de içime sinmiyor. Fen lisesinde ve üniversitede hocalarımın ruhuma saldıkları soru sorma -neden?nasıl?niye öyle tasarlamışlar ki? şöyle yapsak nasıl olur acaba?- virüsü(!)  yakamı bırakmıyor. Ama verilen cevapları uzun uzun okumaya, anlamaya, anlamadığım yerleri ayrı ayrı aratıp en ince ayrıntısına kadar öğrenmeye kalksam yazılım geliştirme süreci fena halde yavaşlar. Zaten kimsenin öyle yaptığını sanmıyorum. Böyle şeyler biraz zamanla gelişiyor farkındayım. Ama böyle düşünürsem sanki hep cevap okuyan, soru soran tarafta kalıcakmışım gibi geliyor. Ben de bir süreden sonra soru cevaplayan tarafta olmak istiyorum. (Cevap demişken kapatıp açmayı denemenizi öneririm efendim ) Üretmeden tüketmek bana göre değil. (bkz: reklam kokan ifadeler)&lt;/p&gt;

&lt;p&gt;Ben şimdilik şöyle bir yol buldum. Çalışma sırasında önemli gördüğüm yerleri not alıyorum, boş bir vaktimde inceliyorum. Olaylara biraz daha vakıf olayım blog yazmaya da başlayacağım. Birine bir şeyi öğretmeye çalışmak çok öğretici oluyor gerçekten.Hem Türkçe kaynaklar maalesef çok yetersiz, belki bir katkımız olur. Özellikle yoğunlaştığım framework&amp;rsquo;lerin dökümanlarını okumayı,source kodları incelemeyi de planlıyorum. Ayrıca camianın nabzını tutmaya, önemli blogları keşfetmeye/takip etmeye çalışıyorum. Herşeyi öğrenmeye çalışıp kendimi yıpratmak niyetinde değilim ama buton nasıl eklenir olayıyla kendimi sınırlandırmak istemem. İşin felsefesine yönelik şeylere de bakıyorum. Hem yazılım geliştirmek stackoverflow&amp;rsquo;dan kod kopyalamaktan ibaret olsaydı o kadar kitap o kadar makale o kadar blog boşuna yazılmadı herhalde.&lt;/p&gt;

&lt;p&gt;Yazıyı şöyle bitireyim: Aşağıdaki fotoğraf bir süre konuşuldu. Whatsapp Türkiye&amp;rsquo;nin en büyük şirketlerinden (THY, Tüpraş, Turkcell) 3 tanesinin toplamından daha değerli imiş. &amp;ldquo;Bizim acil yazılım işine girmemiz lazım. Yazılımda çok para var.&amp;rdquo;  muhabbetleri çok döndü. Tabi herkes patronluğa talip kodu yazmaya niyetlenen yok. Fakat o uygulamalar öyle sürükle bırakla, kod kopyalamakla hemen yazılamıyor maalesef. Biz hızlı treni insanla test ederken &amp;ldquo;gavur&amp;rdquo; eğlence amaçlı bir uygulamayı bile çok sıkı test ediyor. Bir yandan da Türkiye&amp;rsquo;de bu işe para yatıran, şirket kuran insanlar kalifiye çalışan bulamamaktan şikayet ediyor. Eğer gerçekten kaliteli yazılımlar geliştirmek ciddi paralar kazanmak (kalite yeterli olmayabilir ama gerekli) istiyorsak, eğer arkadan takip etmeyi bırakmak istiyorsak stackoverflow&amp;rsquo;da soru cevaplayan adamlar lazım bize galiba. Şuna bile razıyım yahu: &amp;ldquo;It works for me&amp;rdquo; :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/stackoverflowlamak.jpg&#34; title=&#34;stackoverflowlamak&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yeni yetme bir coder&amp;rsquo;ın &amp;ldquo;parlak&amp;rdquo; fikirlerini dinlediğiniz için teşekkür ederim.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>