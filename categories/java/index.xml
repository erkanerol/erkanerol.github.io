<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Blog</title>
    <link>https://erkanerol.github.io/categories/java/index.xml</link>
    <description>Recent content in Java on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="https://erkanerol.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to version a JavaEE Web application with Maven and Git</title>
      <link>https://erkanerol.github.io/post/versioning-git-maven/</link>
      <pubDate>Thu, 11 Feb 2016 22:02:50 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/versioning-git-maven/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this post, I will show how to version a JavaEE Web Application.
The example project is &lt;a href=&#34;https://github.com/erkanerol/versioning_javaee_maven_git&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://erkanerol.github.io/img/screenshot.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;1-create-a-maven-project-and-add-your-dependencies&#34;&gt;1. Create a maven project and add your dependencies.&lt;/h5&gt;

&lt;h5 id=&#34;2-add-your-scm-url-s-to-pom-xml&#34;&gt;2. Add your scm url&amp;rsquo;s to pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;scm&amp;gt;
    &amp;lt;url&amp;gt;
        https://github.com/erkanerol/versioning_javaee_maven_git
    &amp;lt;/url&amp;gt;
    &amp;lt;connection&amp;gt;
       scm:git:git://github.com/erkanerol/versioning_javaee_maven_git.git
    &amp;lt;/connection&amp;gt;
    &amp;lt;developerConnection&amp;gt;
        scm:git:git@github.com:erkanerol/versioning_javaee_maven_git.git
    &amp;lt;/developerConnection&amp;gt;
&amp;lt;/scm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-define-time-format-in-pom&#34;&gt;3. Define time format in pom.&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;properties&amp;gt;
        &amp;lt;maven.build.timestamp.format&amp;gt;
            dd.MM.yyyy_HH_mm
        &amp;lt;/maven.build.timestamp.format&amp;gt;
        &amp;lt;buildDate&amp;gt;
            ${maven.build.timestamp}
        &amp;lt;/buildDate&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-add-mojo-plugin-in-pom-xml&#34;&gt;4. Add mojo plugin  in pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;buildnumber-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
    &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;
            &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;create&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;shortRevisionLength&amp;gt;5&amp;lt;/shortRevisionLength&amp;gt;
        &amp;lt;doCheck&amp;gt;false&amp;lt;/doCheck&amp;gt;
        &amp;lt;doUpdate&amp;gt;false&amp;lt;/doUpdate&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;5-add-version-properties-to-your-resource-directory&#34;&gt;5. Add version.properties to your resource directory&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
version=${version}.${buildNumber}
versionLong=${version}.${buildNumber}.${buildDate}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;6-add-your-resource-folder-in-pom-xml&#34;&gt;6. Add your resource folder in pom.xml&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;
&amp;lt;resources&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/webapp&amp;lt;/directory&amp;gt;
    &amp;lt;/resource&amp;gt;
    &amp;lt;resource&amp;gt;
        &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
        &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
    &amp;lt;/resource&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;7-create-an-application-scoped-bean&#34;&gt;7. Create an application scoped bean&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

package com.erkanerol.example.versioning;

import java.io.IOException;
import java.io.Serializable;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;


@ManagedBean
@ApplicationScoped
public class VersionBean implements Serializable {

    private String version;
    private String versionLong;
    
    @PostConstruct
    public void init(){
        
        try {
            Properties properties = new Properties();
            properties
                .load(this
                    .getClass()
                    .getClassLoader()
                    .getResourceAsStream(&#34;version.properties&#34;));
        
            version = properties.getProperty(&#34;version&#34;);
            versionLong = properties.getProperty(&#34;versionLong&#34;);
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }
        
    public String getVersion() {
        return version;
    }
    public void setVersion(String version) {
        this.version = version;
    }
    public String getVersionLong() {
        return versionLong;
    }
    public void setVersionLong(String versionLong) {
        this.versionLong = versionLong;
    }   
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;8-use-the-bean-in-your-application&#34;&gt;8. Use the bean in your application.&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;h:outputText value=&#34;version #{versionBean.version}&#34; /&amp;gt;
&amp;lt;h:outputText value=&#34;long version #{versionBean.versionLong}&#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;

&lt;p&gt;Use both long and short version in your application. Short version can be shown to users and long version can be shown in a spesific page like &amp;ldquo;/version.jsf&amp;rdquo;.
If your repository is private, you have to put git password in your pom.xml. You can create a different, read-only account.
You can put the version in name of war file. It makes easy to store executable files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Farklı dillerin alfabelerine göre sıralama (Collator kullanımı)</title>
      <link>https://erkanerol.github.io/post/collator/</link>
      <pubDate>Sat, 09 Jan 2016 21:56:21 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/collator/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java&amp;rsquo;da farklı dillerin alfabelerine göre sıralama yapmak mümkün.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/erkanerol/Examples/blob/master/src/com/erkanerol/examples/collator/CollatorExample.java&#34;&gt;Github Repo&lt;/a&gt;
&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;
package com.erkanerol.examples.collator;

import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;

public class CollatorExample {

    public static void main(String[] args) {
        
        ArrayList&amp;lt;City&amp;gt; list = new ArrayList&amp;lt;City&amp;gt;();
        list.add(new City(&#34;London&#34;));
        list.add(new City(&#34;Newyork&#34;));
        list.add(new City(&#34;Ankara&#34;));
        list.add(new City(&#34;Paris&#34;));
        list.add(new City(&#34;Venice&#34;));
        list.add(new City(&#34;Çankırı&#34;));

        Comparator&amp;lt;City&amp;gt; compDef = new Comparator&amp;lt;CollatorExample.City&amp;gt;() {
            @Override
            public int compare(City c0, City c1) {
                return c0.getName().compareTo(c1.getName());
            }
        };
        
        Comparator&amp;lt;City&amp;gt; compTr = new Comparator&amp;lt;CollatorExample.City&amp;gt;() {
            @Override
            public int compare(City c0, City c1) {
                Collator collator = Collator.getInstance(new Locale(&#34;tr&#34;,&#34;TR&#34;));
                return collator.compare(c0.getName(), c1.getName());
            }
        };
        
        Collections.sort(list,compDef);
        printList(list);
        Collections.sort(list,compTr);
        printList(list);
    }
    
    public static void printList(List&amp;lt;City&amp;gt; list){
        for(City c:list){
            System.out.println(c);
        }
        System.out.println(&#34;nn&#34;);
    }
    
    
    public static class City{
        private String name;
        
        public City(String name){
            this.name = name;                   
        }       
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        @Override
        public String toString(){
            return this.name;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;console&#34;&gt;Console&lt;/h2&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>