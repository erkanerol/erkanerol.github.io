<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yazılılm on Blog</title>
    <link>https://erkanerol.github.io/categories/yaz%C4%B1l%C4%B1lm/</link>
    <description>Recent content in Yazılılm on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <lastBuildDate>Sat, 09 Jan 2016 21:56:21 +0300</lastBuildDate>
    <atom:link href="https://erkanerol.github.io/categories/yaz%C4%B1l%C4%B1lm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Farklı dillerin alfabelerine göre sıralama (Collator kullanımı)</title>
      <link>https://erkanerol.github.io/post/collator/</link>
      <pubDate>Sat, 09 Jan 2016 21:56:21 +0300</pubDate>
      
      <guid>https://erkanerol.github.io/post/collator/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Java&amp;rsquo;da farklı dillerin alfabelerine göre sıralama yapmak mümkün.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/erkanerol/Examples/blob/master/src/com/erkanerol/examples/collator/CollatorExample.java&#34;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
package com.erkanerol.examples.collator;

import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;

public class CollatorExample {

    public static void main(String[] args) {
        
        ArrayList&lt;City&gt; list = new ArrayList&lt;City&gt;();
        list.add(new City(&#34;London&#34;));
        list.add(new City(&#34;Newyork&#34;));
        list.add(new City(&#34;Ankara&#34;));
        list.add(new City(&#34;Paris&#34;));
        list.add(new City(&#34;Venice&#34;));
        list.add(new City(&#34;Çankırı&#34;));

        Comparator&lt;City&gt; compDef = new Comparator&lt;CollatorExample.City&gt;() {
            @Override
            public int compare(City c0, City c1) {
                return c0.getName().compareTo(c1.getName());
            }
        };
        
        Comparator&lt;City&gt; compTr = new Comparator&lt;CollatorExample.City&gt;() {
            @Override
            public int compare(City c0, City c1) {
                Collator collator = Collator.getInstance(new Locale(&#34;tr&#34;,&#34;TR&#34;));
                return collator.compare(c0.getName(), c1.getName());
            }
        };
        
        Collections.sort(list,compDef);
        printList(list);
        Collections.sort(list,compTr);
        printList(list);
    }
    
    public static void printList(List&lt;City&gt; list){
        for(City c:list){
            System.out.println(c);
        }
        System.out.println(&#34;nn&#34;);
    }
    
    
    public static class City{
        private String name;
        
        public City(String name){
            this.name = name;                   
        }       
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        @Override
        public String toString(){
            return this.name;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;console:edbdc7a2ba1ea5e29368db936145cc65&#34;&gt;Console&lt;/h2&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;Ankara&lt;/p&gt;

&lt;p&gt;Çankırı&lt;/p&gt;

&lt;p&gt;London&lt;/p&gt;

&lt;p&gt;Newyork&lt;/p&gt;

&lt;p&gt;Paris&lt;/p&gt;

&lt;p&gt;Venice&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>